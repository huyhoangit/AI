using UnityEngine;

public class BoardManager : MonoBehaviour
{
    [Header("Board Configuration")]
    public int boardSize = 9;
    public float squareSize = 1.0f;
    public float squareSpacing = 0.1f;
    
    [Header("Prefabs")]
    public GameObject boardSquarePrefab; // K√©o prefab BoardSquare v√†o ƒë√¢y
    public GameObject playerPrefab; // Prefab Chess cho ng∆∞·ªùi ch∆°i
    public GameObject wallPrefab; // Prefab Wall cho t∆∞·ªùng
    
    [Header("Board Setup")]
    public Transform boardParent; // Parent ch·ª©a to√†n b·ªô board
    public Vector3 boardOffset = Vector3.zero;
    public bool centerBoard = true;
    
    [Header("Visual Settings")]
    public Material lightSquareMaterial;
    public Material darkSquareMaterial;
    public Color highlightColor = Color.yellow;
    
    // Singleton pattern ƒë·ªÉ tr√°nh duplicate
    public static BoardManager Instance { get; private set; }
    
    // M·∫£ng l∆∞u tr·ªØ c√°c √¥ vu√¥ng
    private GameObject[,] boardSquares;
    private Vector3 boardStartPosition;
    private bool boardCreated = false;
    
    void Awake()
    {
        // Singleton pattern - ch·ªâ cho ph√©p 1 BoardManager
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è Duplicate BoardManager detected! Destroying this instance.");
            Destroy(gameObject);
            return;
        }
    }
    
    void Start()
    {
        // Ki·ªÉm tra xem ƒë√£ c√≥ board n√†o ƒë∆∞·ª£c t·∫°o ch∆∞a
        GameObject existingBoard = GameObject.Find("QuoridorBoard");
        if (existingBoard != null && existingBoard.transform.childCount > 0)
        {
            Debug.LogWarning("‚ö†Ô∏è Board already exists! Skipping board creation.");
            boardCreated = true;
            return;
        }
        
        CreateBoard3D();
    }
    
    /// <summary>
    /// T·∫°o b√†n c·ªù 3D v·ªõi 9x9 √¥ vu√¥ng
    /// </summary>
    public void CreateBoard3D()
    {
        // Ki·ªÉm tra ƒë√£ t·∫°o board ch∆∞a
        if (boardCreated)
        {
            Debug.LogWarning("‚ö†Ô∏è Board already created! Skipping...");
            return;
        }
        
        Debug.Log("üéØ B·∫Øt ƒë·∫ßu t·∫°o b√†n c·ªù 3D...");
        
        // T·∫°o parent object n·∫øu ch∆∞a c√≥
        SetupBoardParent();
        
        // X√≥a board c≈© n·∫øu c√≥
        ClearExistingBoard();
        
        // Kh·ªüi t·∫°o m·∫£ng board
        boardSquares = new GameObject[boardSize, boardSize];
        
        // T√≠nh to√°n v·ªã tr√≠ b·∫Øt ƒë·∫ßu
        CalculateBoardStartPosition();
        
        // T·∫°o t·ª´ng √¥ vu√¥ng
        CreateAllSquares();
        
        // ƒê·∫∑t camera nh√¨n board
        SetupCamera();
        
        // ƒê√°nh d·∫•u ƒë√£ t·∫°o board
        boardCreated = true;
        
        Debug.Log($"‚úÖ Ho√†n th√†nh t·∫°o b√†n c·ªù {boardSize}x{boardSize}!");
    }
    
    /// <summary>
    /// Thi·∫øt l·∫≠p parent object cho board
    /// </summary>
    private void SetupBoardParent()
    {
        if (boardParent == null)
        {
            // Ki·ªÉm tra xem ƒë√£ c√≥ QuoridorBoard n√†o ch∆∞a
            GameObject existingBoard = GameObject.Find("QuoridorBoard");
            if (existingBoard != null)
            {
                Debug.Log("üîÑ Using existing QuoridorBoard parent");
                boardParent = existingBoard.transform;
                return;
            }
            
            GameObject parentObj = new GameObject("QuoridorBoard");
            boardParent = parentObj.transform;
            boardParent.position = boardOffset;
            Debug.Log("üéØ Created new QuoridorBoard parent");
        }
    }
    
    /// <summary>
    /// X√≥a board hi·ªán t·∫°i
    /// </summary>
    private void ClearExistingBoard()
    {
        if (boardParent != null)
        {
            // X√≥a t·∫•t c·∫£ con c·ªßa board parent
            int childCount = boardParent.childCount;
            for (int i = childCount - 1; i >= 0; i--)
            {
                if (Application.isEditor && !Application.isPlaying)
                {
                    DestroyImmediate(boardParent.GetChild(i).gameObject);
                }
                else
                {
                    Destroy(boardParent.GetChild(i).gameObject);
                }
            }
        }
    }
    
    /// <summary>
    /// T√≠nh to√°n v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa board
    /// </summary>
    private void CalculateBoardStartPosition()
    {
        float totalSize = (boardSize - 1) * (squareSize + squareSpacing);
        
        if (centerBoard)
        {
            boardStartPosition = boardParent.position + new Vector3(
                -totalSize / 2f,
                0,
                -totalSize / 2f
            );
        }
        else
        {
            boardStartPosition = boardParent.position;
        }
    }
    
    /// <summary>
    /// T·∫°o t·∫•t c·∫£ √¥ vu√¥ng
    /// </summary>
    private void CreateAllSquares()
    {
        for (int row = 0; row < boardSize; row++)
        {
            for (int col = 0; col < boardSize; col++)
            {
                CreateSingleSquare(row, col);
            }
        }
    }
    
    /// <summary>
    /// T·∫°o m·ªôt √¥ vu√¥ng t·∫°i v·ªã tr√≠ ch·ªâ ƒë·ªãnh
    /// </summary>
    private void CreateSingleSquare(int row, int col)
    {
        // T√≠nh v·ªã tr√≠ world
        Vector3 worldPosition = boardStartPosition + new Vector3(
            col * (squareSize + squareSpacing),
            0,
            row * (squareSize + squareSpacing)
        );
        
        // T·∫°o √¥ vu√¥ng
        GameObject square = CreateSquareObject(worldPosition, row, col);
        
        // C·∫•u h√¨nh √¥ vu√¥ng
        ConfigureSquareObject(square, row, col);
        
        // L∆∞u v√†o m·∫£ng
        boardSquares[row, col] = square;
    }
    
    /// <summary>
    /// T·∫°o object √¥ vu√¥ng
    /// </summary>
    private GameObject CreateSquareObject(Vector3 position, int row, int col)
    {
        GameObject square;
        
        if (boardSquarePrefab != null)
        {
            // S·ª≠ d·ª•ng prefab c√≥ s·∫µn
            square = Instantiate(boardSquarePrefab, position, Quaternion.identity, boardParent);
        }
        else
        {
            // T·∫°o cube m·∫∑c ƒë·ªãnh
            square = GameObject.CreatePrimitive(PrimitiveType.Cube);
            square.transform.position = position;
            square.transform.localScale = new Vector3(squareSize, 0.2f, squareSize);
            square.transform.SetParent(boardParent);
            
            Debug.LogWarning("‚ö†Ô∏è Ch∆∞a g√°n BoardSquare prefab, ƒëang s·ª≠ d·ª•ng cube m·∫∑c ƒë·ªãnh!");
        }
        
        return square;
    }
    
    /// <summary>
    /// C·∫•u h√¨nh object √¥ vu√¥ng
    /// </summary>
    private void ConfigureSquareObject(GameObject square, int row, int col)
    {
        // ƒê·∫∑t t√™n
        square.name = $"Square_{row}_{col}";
        
        // Th√™m BoardSquare component n·∫øu ch∆∞a c√≥
        BoardSquare boardSquareComponent = square.GetComponent<BoardSquare>();
        if (boardSquareComponent == null)
        {
            boardSquareComponent = square.AddComponent<BoardSquare>();
        }
        
        // C·∫•u h√¨nh BoardSquare
        boardSquareComponent.row = row;
        boardSquareComponent.col = col;
        
        // Th√™m collider cho t∆∞∆°ng t√°c
        if (square.GetComponent<Collider>() == null)
        {
            square.AddComponent<BoxCollider>();
        }
        
        // √Åp d·ª•ng m√†u s·∫Øc
        ApplySquareColor(square, row, col);
        
        // Th√™m tag
        square.tag = "BoardSquare";
    }
    
    /// <summary>
    /// √Åp d·ª•ng m√†u s·∫Øc pattern c·ªù vua
    /// </summary>
    private void ApplySquareColor(GameObject square, int row, int col)
    {
        Renderer renderer = square.GetComponent<Renderer>();
        if (renderer == null) return;
        
        bool isLightSquare = (row + col) % 2 == 0;
        
        if (isLightSquare && lightSquareMaterial != null)
        {
            renderer.material = lightSquareMaterial;
        }
        else if (!isLightSquare && darkSquareMaterial != null)
        {
            renderer.material = darkSquareMaterial;
        }
        else
        {
            // M√†u m·∫∑c ƒë·ªãnh
            Color squareColor = isLightSquare ? new Color(0.9f, 0.9f, 0.8f) : new Color(0.4f, 0.3f, 0.2f);
            renderer.material.color = squareColor;
        }
    }
    
    /// <summary>
    /// Thi·∫øt l·∫≠p camera nh√¨n board
    /// </summary>
    private void SetupCamera()
    {
        Camera mainCamera = Camera.main;
        if (mainCamera != null)
        {
            // ƒê·∫∑t camera ·ªü v·ªã tr√≠ nh√¨n xu·ªëng board
            Vector3 boardCenter = boardParent.position;
            mainCamera.transform.position = boardCenter + new Vector3(0, 8, -6);
            mainCamera.transform.LookAt(boardCenter);
        }
    }
    
    /// <summary>
    /// L·∫•y √¥ vu√¥ng t·∫°i v·ªã tr√≠
    /// </summary>
    public GameObject GetSquareAt(int row, int col)
    {
        if (IsValidPosition(row, col) && boardSquares != null)
        {
            return boardSquares[row, col];
        }
        return null;
    }
    
    /// <summary>
    /// Ki·ªÉm tra v·ªã tr√≠ h·ª£p l·ªá
    /// </summary>
    public bool IsValidPosition(int row, int col)
    {
        return row >= 0 && row < boardSize && col >= 0 && col < boardSize;
    }
    
    /// <summary>
    /// L·∫•y v·ªã tr√≠ world c·ªßa √¥
    /// </summary>
    public Vector3 GetSquareWorldPosition(int row, int col)
    {
        GameObject square = GetSquareAt(row, col);
        return square != null ? square.transform.position : Vector3.zero;
    }
    
    /// <summary>
    /// Highlight √¥ vu√¥ng
    /// </summary>
    public void HighlightSquare(int row, int col, bool highlight = true)
    {
        GameObject square = GetSquareAt(row, col);
        if (square != null)
        {
            Renderer renderer = square.GetComponent<Renderer>();
            if (renderer != null)
            {
                if (highlight)
                {
                    renderer.material.color = highlightColor;
                }
                else
                {
                    ApplySquareColor(square, row, col);
                }
            }
        }
    }
    
    /// <summary>
    /// Reset t·∫•t c·∫£ highlight
    /// </summary>
    public void ClearAllHighlights()
    {
        if (boardSquares == null) return;
        
        for (int row = 0; row < boardSize; row++)
        {
            for (int col = 0; col < boardSize; col++)
            {
                ApplySquareColor(boardSquares[row, col], row, col);
            }
        }
    }
    
    /// <summary>
    /// T√¨m √¥ g·∫ßn nh·∫•t v·ªõi v·ªã tr√≠ world
    /// </summary>
    public Vector2Int GetNearestSquarePosition(Vector3 worldPos)
    {
        float minDistance = float.MaxValue;
        Vector2Int nearestPos = Vector2Int.zero;
        
        for (int row = 0; row < boardSize; row++)
        {
            for (int col = 0; col < boardSize; col++)
            {
                Vector3 squarePos = GetSquareWorldPosition(row, col);
                float distance = Vector3.Distance(worldPos, squarePos);
                
                if (distance < minDistance)
                {
                    minDistance = distance;
                    nearestPos = new Vector2Int(col, row);
                }
            }
        }
        
        return nearestPos;
    }
    
    /// <summary>
    /// L·∫•y v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa board (cho WallPlacer s·ª≠ d·ª•ng)
    /// </summary>
    public Vector3 GetBoardStartPosition()
    {
        return boardStartPosition;
    }
    
    // Editor functions
    [ContextMenu("T·∫°o Board 3D")]
    public void CreateBoardEditor()
    {
        CreateBoard3D();
    }
    
    [ContextMenu("X√≥a Board")]
    public void ClearBoardEditor()
    {
        ClearExistingBoard();
    }
    
    [ContextMenu("Test Highlight")]
    public void TestHighlight()
    {
        // Test highlight m·ªôt s·ªë √¥
        HighlightSquare(0, 0, true);
        HighlightSquare(4, 4, true);
        HighlightSquare(8, 8, true);
    }
}
