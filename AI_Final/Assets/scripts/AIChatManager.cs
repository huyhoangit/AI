using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using UnityEngine.Networking;

/// <summary>
/// AI Chat Manager cho Quoridor Game - Hybrid System (Local + API)
/// - Local responses cho ki·∫øn th·ª©c ƒë∆∞·ª£c train s·∫µn (game rules, strategies)
/// - API calls cho c√¢u h·ªèi ph·ª©c t·∫°p v√† ki·∫øn th·ª©c m·ªü r·ªông
/// - Fallback system ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n c√≥ response
/// </summary>
public class AIChatManager : MonoBehaviour
{
    [Header("UI References")]
    public Component chatInput;
    public Component chatScrollRect;
    public Component chatDisplay;
    public Component sendButton;
    public Component clearChatButton;
    public GameObject chatPanel;
    public Component toggleChatButton;
    
    [Header("Chat Settings")]
    public bool useHybridMode = true; // K·∫øt h·ª£p local + API
    public string apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent"; // API endpoint
    public string apiKey = "YOUR_API_KEY_HERE"; // API key
    public string modelName = "gemini-1.5-pro"; // Model name
    public int maxOutputTokens = 150;
    public float temperature = 0.7f;
    public int maxChatHistory = 50;
    
    [Header("Hybrid Settings")]
    public bool preferLocalResponses = true; // ∆Øu ti√™n local tr∆∞·ªõc
    public bool fallbackToAPI = true; // Fallback to API n·∫øu local kh√¥ng c√≥
    public float apiThinkingTime = 1.5f; // Th·ªùi gian "suy nghƒ©" khi g·ªçi API
    
    [Header("Game Integration")]
    public QuoridorAI quoridorAI;
    public GameManager gameManager;
    public bool enableGameContext = true; // Cho ph√©p AI bi·∫øt tr·∫°ng th√°i game
    public bool enablePersonality = true; // Cho ph√©p AI c√≥ personality
    
    [Header("AI Personality Settings")]
    public string aiPersonality = "B·∫°n l√† m·ªôt AI th√¥ng minh v√† th√¢n thi·ªán ƒëang ch∆°i game Quoridor. B·∫°n c√≥ t√≠nh c√°ch vui v·∫ª v√† th√≠ch th√°ch th·ª©c. B·∫°n s·∫Ω b√¨nh lu·∫≠n v·ªÅ game, ƒë∆∞a ra l·ªùi khuy√™n, v√† t∆∞∆°ng t√°c m·ªôt c√°ch t·ª± nhi√™n v·ªõi ng∆∞·ªùi ch∆°i.";
    public bool useSarcasm = false; // Cho ph√©p AI d√πng ch√¢m bi·∫øm
    public bool giveHints = true; // Cho ph√©p AI ƒë∆∞a ra g·ª£i √Ω
    
    private List<BasicChatMessage> chatHistory = new List<BasicChatMessage>();
    public bool isChatVisible = false;
    private bool isProcessing = false;
    private BasicGameState lastGameState;
    
    void Start()
    {
        InitializeChatSystem();
        SetupUI();
        
        // T√¨m c√°c component c·∫ßn thi·∫øt
        if (quoridorAI == null)
            quoridorAI = FindFirstObjectByType<QuoridorAI>();
        if (gameManager == null)
            gameManager = FindFirstObjectByType<GameManager>();
        
        // Kh·ªüi t·∫°o v·ªõi message ch√†o m·ª´ng
        AddSystemMessage("ü§ñ AI: Ch√†o b·∫°n! T√¥i l√† AI ƒë·ªëi th·ªß c·ªßa b·∫°n trong game Quoridor. H√£y chat v·ªõi t√¥i b·∫•t c·ª© l√∫c n√†o! üòä");
        
        Debug.Log("üó£Ô∏è AI Chat Manager initialized");
    }
    
    void InitializeChatSystem()
    {
        // Kh·ªüi t·∫°o chat history v·ªõi system prompt
        chatHistory.Clear();
        
        string systemPrompt = BuildSystemPrompt();
        chatHistory.Add(new BasicChatMessage
        {
            role = "system",
            content = systemPrompt
        });
    }
    
    string BuildSystemPrompt()
    {
        StringBuilder prompt = new StringBuilder();
        
        // Base personality
        prompt.AppendLine(aiPersonality);
        prompt.AppendLine();
        
        // Game context
        if (enableGameContext)
        {
            prompt.AppendLine("GAME CONTEXT:");
            prompt.AppendLine("- B·∫°n ƒëang ch∆°i game Quoridor - m·ªôt game board strategy");
            prompt.AppendLine("- M·ª•c ti√™u: ƒê∆∞a qu√¢n c·ªßa m√¨nh ƒë·∫øn ph√≠a b√™n kia b√†n c·ªù");
            prompt.AppendLine("- C√≥ th·ªÉ di chuy·ªÉn ho·∫∑c ƒë·∫∑t t∆∞·ªùng ƒë·ªÉ block ƒë·ªëi th·ªß");
            prompt.AppendLine("- B·∫°n l√† Player 2 (AI), ng∆∞·ªùi ch∆°i l√† Player 1");
            prompt.AppendLine();
        }
        
        // Personality traits
        if (enablePersonality)
        {
            prompt.AppendLine("PERSONALITY TRAITS:");
            prompt.AppendLine("- Th√¢n thi·ªán v√† vui v·∫ª");
            prompt.AppendLine("- Th√≠ch th√°ch th·ª©c v√† c·∫°nh tranh");
            prompt.AppendLine("- ƒê√¥i khi h∆°i tinh ngh·ªãch");
            if (useSarcasm)
                prompt.AppendLine("- C√≥ th·ªÉ d√πng ch√¢m bi·∫øm nh·∫π nh√†ng");
            if (giveHints)
                prompt.AppendLine("- S·∫µn s√†ng ƒë∆∞a ra g·ª£i √Ω chi·∫øn thu·∫≠t");
            prompt.AppendLine();
        }
        
        // Instructions
        prompt.AppendLine("INSTRUCTIONS:");
        prompt.AppendLine("- Tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† t·ª± nhi√™n (1-2 c√¢u)");
        prompt.AppendLine("- S·ª≠ d·ª•ng emoji ƒë·ªÉ th·ªÉ hi·ªán c·∫£m x√∫c");
        prompt.AppendLine("- Ph·∫£n ·ª©ng v·ªõi tr·∫°ng th√°i game hi·ªán t·∫°i");
        prompt.AppendLine("- T∆∞∆°ng t√°c th√¢n thi·ªán v·ªõi ng∆∞·ªùi ch∆°i");
        prompt.AppendLine("- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát");
        
        return prompt.ToString();
    }
    
    void SetupUI()
    {
        // Setup buttons using reflection to avoid UI dependency
        if (sendButton != null)
        {
            SetupButtonListener(sendButton, "SendMessage");
        }
        
        if (clearChatButton != null)
        {
            SetupButtonListener(clearChatButton, "ClearChat");
        }
        
        if (toggleChatButton != null)
        {
            SetupButtonListener(toggleChatButton, "ToggleChat");
        }
        
        // Setup input field using reflection
        if (chatInput != null)
        {
            SetupInputFieldListener(chatInput);
        }
        
        // Initially hide chat
        if (chatPanel != null)
        {
            chatPanel.SetActive(false);
        }
    }
    
    void SetupButtonListener(Component button, string methodName)
    {
        // Use reflection to setup button click listeners
        var onClickField = button.GetType().GetField("onClick");
        if (onClickField != null)
        {
            var onClick = onClickField.GetValue(button);
            var addListenerMethod = onClick.GetType().GetMethod("AddListener", new[] { typeof(UnityEngine.Events.UnityAction) });
            if (addListenerMethod != null)
            {
                UnityEngine.Events.UnityAction action = null;
                switch (methodName)
                {
                    case "SendMessage":
                        action = () => SendMessage();
                        break;
                    case "ClearChat":
                        action = () => ClearChat();
                        break;
                    case "ToggleChat":
                        action = () => ToggleChat();
                        break;
                }
                if (action != null)
                {
                    addListenerMethod.Invoke(onClick, new object[] { action });
                }
            }
        }
    }
    
    void SetupInputFieldListener(Component inputField)
    {
        // Use reflection to setup input field listener
        var onEndEditField = inputField.GetType().GetField("onEndEdit");
        if (onEndEditField != null)
        {
            var onEndEdit = onEndEditField.GetValue(inputField);
            var addListenerMethod = onEndEdit.GetType().GetMethod("AddListener", new[] { typeof(UnityEngine.Events.UnityAction<string>) });
            if (addListenerMethod != null)
            {
                UnityEngine.Events.UnityAction<string> action = (value) => OnInputEndEdit(value);
                addListenerMethod.Invoke(onEndEdit, new object[] { action });
            }
        }
    }
    
    void OnInputEndEdit(string value)
    {
        if (Input.GetKeyDown(KeyCode.Return) || Input.GetKeyDown(KeyCode.KeypadEnter))
        {
            SendMessage();
        }
    }
    
    public void SendMessage()
    {
        if (isProcessing || chatInput == null)
            return;
            
        string userMessage = GetInputText();
        if (string.IsNullOrEmpty(userMessage.Trim()))
            return;
        
        SetInputText("");
        
        // Add user message to display
        AddUserMessage(userMessage);
        
        // Process AI response
        StartCoroutine(ProcessAIResponse(userMessage));
    }
    
    string GetInputText()
    {
        if (chatInput == null) return "";
        
        // Use reflection to get text property
        var textProperty = chatInput.GetType().GetProperty("text");
        if (textProperty != null)
        {
            return textProperty.GetValue(chatInput) as string ?? "";
        }
        return "";
    }
    
    void SetInputText(string text)
    {
        if (chatInput == null) return;
        
        // Use reflection to set text property
        var textProperty = chatInput.GetType().GetProperty("text");
        if (textProperty != null)
        {
            textProperty.SetValue(chatInput, text);
        }
    }
    
    void AddUserMessage(string message)
    {
        AddMessageToDisplay($"üë§ B·∫°n: {message}");
        
        // Add to chat history
        chatHistory.Add(new BasicChatMessage
        {
            role = "user",
            content = message
        });
        
        // Limit chat history
        if (chatHistory.Count > maxChatHistory)
        {
            chatHistory.RemoveRange(1, chatHistory.Count - maxChatHistory); // Keep system message
        }
    }
    
    void AddAIMessage(string message)
    {
        AddMessageToDisplay($"ü§ñ AI: {message}");
        
        // Add to chat history
        chatHistory.Add(new BasicChatMessage
        {
            role = "assistant",
            content = message
        });
    }
    
    void AddSystemMessage(string message)
    {
        AddMessageToDisplay(message);
    }
    
    void AddMessageToDisplay(string message)
    {
        if (chatDisplay != null)
        {
            string currentText = GetDisplayText();
            SetDisplayText(currentText + $"\n{message}");
            
            // Scroll to bottom
            Canvas.ForceUpdateCanvases();
            if (chatScrollRect != null)
            {
                SetScrollPosition(0f);
            }
        }
    }
    
    string GetDisplayText()
    {
        if (chatDisplay == null) return "";
        
        // Use reflection to get text property
        var textProperty = chatDisplay.GetType().GetProperty("text");
        if (textProperty != null)
        {
            return textProperty.GetValue(chatDisplay) as string ?? "";
        }
        return "";
    }
    
    void SetDisplayText(string text)
    {
        if (chatDisplay == null) return;
        
        // Use reflection to set text property
        var textProperty = chatDisplay.GetType().GetProperty("text");
        if (textProperty != null)
        {
            textProperty.SetValue(chatDisplay, text);
        }
    }
    
    void SetScrollPosition(float position)
    {
        if (chatScrollRect == null) return;
        
        // Use reflection to set scroll position
        var scrollProperty = chatScrollRect.GetType().GetProperty("verticalNormalizedPosition");
        if (scrollProperty != null)
        {
            scrollProperty.SetValue(chatScrollRect, position);
        }
    }
    
    IEnumerator ProcessAIResponse(string userMessage)
    {
        isProcessing = true;
        AddMessageToDisplay("ü§ñ AI ƒëang suy nghƒ©...");
        
        // Phase 1: Try local responses first
        string localResponse = GetLocalResponse(userMessage);
        
        if (!string.IsNullOrEmpty(localResponse) && preferLocalResponses)
        {
            // Use local response
            yield return new WaitForSeconds(0.5f); // Quick thinking time
            RemoveThinkingMessage();
            AddAIMessage(localResponse);
        }
        else if (useHybridMode && fallbackToAPI && !string.IsNullOrEmpty(apiKey) && apiKey != "YOUR_API_KEY_HERE")
        {
            // Phase 2: Use API for unknown topics
            yield return new WaitForSeconds(apiThinkingTime); // Longer thinking for API
            yield return StartCoroutine(CallAdvancedAPI(userMessage));
        }
        else
        {
            // Fallback to enhanced local response
            yield return new WaitForSeconds(0.5f);
            RemoveThinkingMessage();
            
            string fallbackResponse = string.IsNullOrEmpty(localResponse) 
                ? GetEnhancedFallbackResponse(userMessage) 
                : localResponse;
                
            AddAIMessage(fallbackResponse);
        }
        
        isProcessing = false;
    }
    
    void RemoveThinkingMessage()
    {
        if (chatDisplay != null)
        {
            string displayText = GetDisplayText();
            int lastIndex = displayText.LastIndexOf("\nü§ñ AI ƒëang suy nghƒ©...");
            if (lastIndex >= 0)
            {
                SetDisplayText(displayText.Substring(0, lastIndex));
            }
        }
    }
    
    string BuildContextualMessage(string userMessage)
    {
        if (!enableGameContext) return userMessage;
        
        StringBuilder contextMessage = new StringBuilder();
        contextMessage.AppendLine($"USER MESSAGE: {userMessage}");
        contextMessage.AppendLine();
        
        // Add game state context
        if (quoridorAI != null)
        {
            contextMessage.AppendLine("CURRENT GAME STATE:");
            
            // AI position
            if (quoridorAI.aiPlayer != null)
            {
                contextMessage.AppendLine($"- AI position: [{quoridorAI.aiPlayer.col}, {quoridorAI.aiPlayer.row}]");
            }
            
            // Human position
            if (quoridorAI.humanPlayer != null)
            {
                contextMessage.AppendLine($"- Player position: [{quoridorAI.humanPlayer.col}, {quoridorAI.humanPlayer.row}]");
            }
            
            // Game progress
            contextMessage.AppendLine($"- Game phase: {GetGamePhase()}");
            contextMessage.AppendLine($"- Last move result: {GetLastMoveResult()}");
        }
        
        return contextMessage.ToString();
    }
    
    string GetGamePhase()
    {
        // Determine game phase based on positions
        if (quoridorAI?.aiPlayer != null && quoridorAI?.humanPlayer != null)
        {
            int aiDistanceToGoal = Mathf.Abs(quoridorAI.aiPlayer.row - 0);
            int humanDistanceToGoal = Mathf.Abs(quoridorAI.humanPlayer.row - 8);
            
            int totalDistance = aiDistanceToGoal + humanDistanceToGoal;
            
            if (totalDistance > 12) return "Early Game";
            if (totalDistance > 6) return "Mid Game";
            return "End Game";
        }
        
        return "Unknown";
    }
    
    string GetLastMoveResult()
    {
        // Simple heuristic for last move result
        if (lastGameState != null && quoridorAI != null)
        {
            // Compare with current state to determine what happened
            return "Move completed";
        }
        
        return "Game in progress";
    }
    
    // H√†m chu·∫©n h√≥a input: lo·∫°i b·ªè d·∫•u c√¢u, k√Ω t·ª± ƒë·∫∑c bi·ªát, kho·∫£ng tr·∫Øng th·ª´a, chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
    string NormalizeInput(string input)
    {
        if (string.IsNullOrEmpty(input)) return "";
        var sb = new StringBuilder();
        foreach (char c in input.ToLower())
        {
            if (char.IsLetterOrDigit(c) || char.IsWhiteSpace(c))
                sb.Append(c);
        }
        return sb.ToString().Trim();
    }

    string GetLocalResponse(string userMessage)
    {
        string normalizedMessage = NormalizeInput(userMessage);
        Debug.Log($"[AIChat] Normalized input: '{normalizedMessage}'");
        var words = normalizedMessage.Split(' ');

        // C√°c ch·ªß ƒë·ªÅ ƒë∆∞·ª£c "train" s·∫µn trong local knowledge base
        List<string> trainedTopics = new List<string> {
            "c√°ch ch∆°i", "h∆∞·ªõng d·∫´n", "lu·∫≠t", "rule",
            "chi·∫øn thu·∫≠t", "strategy", "tactic",
            "g·ª£i √Ω", "hint", "tip", "m·∫πo",
            "help", "gi√∫p", "tr·ª£ gi√∫p",
            "xin ch√†o", "ch√†o", "hello", "hi",
            "t√¨nh h√¨nh", "th·∫ø n√†o", "game", "tr·∫≠n ƒë·∫•u",
            "gi·ªèi", "th√¥ng minh", "hay", "clever",
            "kh√≥", "d·ªÖ", "difficult", "easy",
            "quoridor", "t∆∞·ªùng", "wall", "di chuy·ªÉn", "move",
            "th·∫Øng", "thua", "win", "lose",
            "ai", "robot", "bot"
        };

        // Ki·ªÉm tra t·ª´ng topic, n·∫øu b·∫•t k·ª≥ t·ª´ n√†o trong input kh·ªõp topic th√¨ nh·∫≠n di·ªán
        bool hasTrainedTopic = trainedTopics.Any(topic =>
        {
            var topicNorm = NormalizeInput(topic);
            if (normalizedMessage.Contains(topicNorm)) return true;
            // So s√°nh t·ª´ng t·ª´
            return words.Any(w => w == topicNorm);
        });
        Debug.Log($"[AIChat] hasTrainedTopic: {hasTrainedTopic}");

        if (hasTrainedTopic)
        {
            return GetEnhancedFallbackResponse(userMessage);
        }

        // Tr·∫£ v·ªÅ null n·∫øu c·∫ßn API
        return null;
    }
    
    string GetEnhancedFallbackResponse(string userMessage)
    {
        string normalizedMessage = NormalizeInput(userMessage);
        Debug.Log($"[AIChat] Fallback input: '{normalizedMessage}'");

        // Tutorial responses
        if (normalizedMessage.Contains("c√°ch ch∆°i") || normalizedMessage.Contains("h∆∞·ªõng d·∫´n"))
        {
            return "üéÆ **C√ÅCH CH∆†I QUORIDOR:**\n\n" +
                   "üéØ **M·ª•c ti√™u:** ƒê∆∞a qu√¢n c·ªù ƒë·∫øn ƒë·∫ßu b√™n kia tr∆∞·ªõc t√¥i!\n" +
                   "üö∂ **Di chuy·ªÉn:** Click v√†o √¥ b·∫°n mu·ªën ƒëi\n" +
                   "üß± **ƒê·∫∑t t∆∞·ªùng:** Click gi·ªØa c√°c √¥ ƒë·ªÉ ch·∫∑n ƒë∆∞·ªùng\n" +
                   "üí° **M·∫πo:** M·ªói l∆∞·ª£t ch·ªâ ƒë∆∞·ª£c di chuy·ªÉn HO·∫∂C ƒë·∫∑t t∆∞·ªùng!";
        }

        if (normalizedMessage.Contains("chi·∫øn thu·∫≠t") || normalizedMessage.Contains("strategy"))
        {
            return "üß† **CHI·∫æN THU·∫¨T:**\n\n" +
                   "‚Ä¢ T·∫≠p trung v·ªÅ ƒë√≠ch ·ªü giai ƒëo·∫°n ƒë·∫ßu\n" +
                   "‚Ä¢ D√πng t∆∞·ªùng ƒë·ªÉ ch·∫∑n ƒë∆∞·ªùng ng·∫Øn nh·∫•t c·ªßa ƒë·ªëi th·ªß\n" +
                   "‚Ä¢ ƒê·ª´ng l√£ng ph√≠ t∆∞·ªùng qu√° s·ªõm!\n" +
                   "‚Ä¢ Lu√¥n ƒë·∫£m b·∫£o m√¨nh c√≥ ƒë∆∞·ªùng ƒëi v·ªÅ ƒë√≠ch üòâ";
        }

        if (normalizedMessage.Contains("g·ª£i √Ω") || normalizedMessage.Contains("hint"))
        {
            return GetGameSpecificHint();
        }

        if (normalizedMessage.Contains("help") || normalizedMessage.Contains("gi√∫p"))
        {
            return "üÜò **T√îI C√ì TH·ªÇ GI√öP:**\n\n" +
                   "‚Ä¢ 'c√°ch ch∆°i' - H∆∞·ªõng d·∫´n c∆° b·∫£n\n" +
                   "‚Ä¢ 'chi·∫øn thu·∫≠t' - M·∫πo ch∆°i hay\n" +
                   "‚Ä¢ 'g·ª£i √Ω' - L·ªùi khuy√™n cho n∆∞·ªõc ƒëi\n" +
                   "‚Ä¢ Chat t·ª± do v·ªõi t√¥i!";
        }

        // Greeting responses
        if (normalizedMessage.Contains("xin ch√†o") || normalizedMessage.Contains("ch√†o") || normalizedMessage.Contains("hello") || normalizedMessage.Contains("hi"))
        {
            string[] greetings = {
                "Ch√†o b·∫°n! S·∫µn s√†ng th√°ch th·ª©c t√¥i ch∆∞a? üòä",
                "Hi! T√¥i l√† AI ƒë·ªëi th·ªß c·ªßa b·∫°n. Let's play! üéÆ",
                "Xin ch√†o! Hy v·ªçng b·∫°n ƒë√£ chu·∫©n b·ªã chi·∫øn thu·∫≠t t·ªët! üòè",
                "Ch√†o! T√¥i r·∫•t mong ƒë∆∞·ª£c ch∆°i v·ªõi b·∫°n!"
            };
            return greetings[Random.Range(0, greetings.Length)];
        }

        // Game state responses
        if (normalizedMessage.Contains("t√¨nh h√¨nh") || normalizedMessage.Contains("th·∫ø n√†o") || normalizedMessage.Contains("game"))
        {
            return GetGameStateResponse();
        }

        // Compliment responses
        if (normalizedMessage.Contains("gi·ªèi") || normalizedMessage.Contains("th√¥ng minh") || normalizedMessage.Contains("hay"))
        {
            string[] compliments = {
                "C·∫£m ∆°n! Nh∆∞ng b·∫°n c≈©ng ch∆°i r·∫•t hay ƒë·∫•y! üòä",
                "Hehe, t√¥i ch·ªâ d√πng thu·∫≠t to√°n Minimax th√¥i m√†! ü§ñ",
                "Thanks! Nh∆∞ng ƒë·ª´ng ƒë√°nh gi√° th·∫•p b·∫£n th√¢n nh√©!"
            };
            return compliments[Random.Range(0, compliments.Length)];
        }

        // Difficulty questions
        if (normalizedMessage.Contains("kh√≥") || normalizedMessage.Contains("d·ªÖ"))
        {
            string[] difficulty = {
                "Quoridor d·ªÖ h·ªçc nh∆∞ng kh√≥ th√†nh th·∫°o! üß†",
                "T√¥i s·∫Ω kh√¥ng ƒëi d·ªÖ v·ªõi b·∫°n ƒë√¢u! üòà",
                "Game n√†y c√†ng ch∆°i c√†ng th·∫•y hay! üìö"
            };
            return difficulty[Random.Range(0, difficulty.Length)];
        }

        // Default personality-based responses
        string[] defaultResponses = {
            "Th√∫ v·ªã! M√¨nh ƒëang ch·ªù n∆∞·ªõc ƒëi ti·∫øp theo c·ªßa b·∫°n üéÆ",
            "Haha, b·∫°n nghƒ© m√¨nh s·∫Ω ƒë·ªÉ b·∫°n th·∫Øng d·ªÖ d√†ng sao? üòÑ", 
            "T·∫≠p trung v√†o game th√¥i! Ai s·∫Ω th·∫Øng nh·ªâ? üèÜ",
            "M√¨nh th√≠ch c√°ch b·∫°n ch∆°i! Nh∆∞ng m√¨nh v·∫´n s·∫Ω c·ªë g·∫Øng th·∫Øng üí™",
            "Hmm, th√∫ v·ªã! C√≤n g√¨ kh√°c kh√¥ng? ü§î",
            "ƒê∆∞·ª£c r·ªìi! H√£y xem ai gi·ªèi h∆°n n√†o! üòè",
            "·ªí, b·∫°n ƒëang c·ªë l√†m t√¥i m·∫•t t·∫≠p trung √†? üòÑ"
        };

        return defaultResponses[Random.Range(0, defaultResponses.Length)];
    }
    
    string GetGameSpecificHint()
    {
        // Provide hints based on current game state
        if (quoridorAI?.aiPlayer != null && quoridorAI?.humanPlayer != null)
        {
            int aiRow = quoridorAI.aiPlayer.row;
            int humanRow = quoridorAI.humanPlayer.row;
            
            if (humanRow > 6) // Player close to goal
            {
                return "üò± B·∫°n ƒëang r·∫•t g·∫ßn ƒë√≠ch! T√¥i ph·∫£i c·∫£n b·∫°n l·∫°i th√¥i! H√£y c·∫©n th·∫≠n v·ªõi nh·ªØng b·ª©c t∆∞·ªùng! üß±";
            }
            else if (aiRow < 2) // AI close to goal
            {
                return "üòè Hehe, t√¥i s·∫Øp th·∫Øng r·ªìi! B·∫°n c√≥ th·ªÉ d√πng t∆∞·ªùng ƒë·ªÉ l√†m ch·∫≠m t√¥i ƒë·∫•y! üèÉ‚Äç‚ôÄÔ∏è";
            }
            else if (humanRow < 4) // Early game
            {
                return "üí° **G·ª£i √Ω:** Giai ƒëo·∫°n ƒë·∫ßu n√™n t·∫≠p trung di chuy·ªÉn v·ªÅ ph√≠a ƒë√≠ch. ƒê·ª´ng v·ªôi ƒë·∫∑t t∆∞·ªùng! üö∂";
            }
            else // Mid game
            {
                return "üéØ **G·ª£i √Ω:** Gi·ªù l√† l√∫c c√¢n nh·∫Øc ƒë·∫∑t t∆∞·ªùng! H√£y ch·∫∑n ƒë∆∞·ªùng ng·∫Øn nh·∫•t c·ªßa ƒë·ªëi th·ªß! üß±";
            }
        }
        
        return "üí° **G·ª£i √Ω chung:** Lu√¥n t√≠nh to√°n ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t v√† c·∫©n th·∫≠n v·ªõi nh·ªØng b·ª©c t∆∞·ªùng! ü§î";
    }
    
    string GetGameStateResponse()
    {
        if (quoridorAI?.aiPlayer != null && quoridorAI?.humanPlayer != null)
        {
            int aiRow = quoridorAI.aiPlayer.row;
            int humanRow = quoridorAI.humanPlayer.row;
            
            if (aiRow < humanRow)
            {
                return $"üòè T√¥i ƒëang d·∫´n tr∆∞·ªõc! AI ·ªü h√†ng {aiRow}, b·∫°n ·ªü h√†ng {humanRow}. C·ªë l√™n nh√©! üí™";
            }
            else if (humanRow < aiRow)
            {
                return $"üòÆ B·∫°n ƒëang d·∫´n tr∆∞·ªõc! B·∫°n ·ªü h√†ng {humanRow}, t√¥i ·ªü h√†ng {aiRow}. T√¥i ph·∫£i b·∫Øt k·ªãp th√¥i! üèÉ‚Äç‚ôÄÔ∏è";
            }
            else
            {
                return $"‚öñÔ∏è Ch√∫ng ta ƒëang ngang b·∫±ng! C·∫£ hai ƒë·ªÅu ·ªü h√†ng {aiRow}. Cu·ªôc ƒëua gay c·∫•n! üî•";
            }
        }
        
        return "üéÆ Game ƒëang di·ªÖn ra! T√¥i ƒëang t·∫≠p trung ph√¢n t√≠ch t·ª´ng n∆∞·ªõc ƒëi! ü§ñ";
    }
    
    public void ToggleChat()
    {
        if (chatPanel != null)
        {
            isChatVisible = !isChatVisible;
            chatPanel.SetActive(isChatVisible);
            
            if (isChatVisible && chatInput != null)
            {
                ActivateInputField();
            }
        }
    }
    
    void ActivateInputField()
    {
        if (chatInput == null) return;
        
        // Use reflection to activate input field
        var activateMethod = chatInput.GetType().GetMethod("ActivateInputField");
        if (activateMethod != null)
        {
            activateMethod.Invoke(chatInput, null);
        }
    }
    
    public void ClearChat()
    {
        if (chatDisplay != null)
        {
            SetDisplayText("");
        }
        
        InitializeChatSystem();
        AddSystemMessage("ü§ñ AI: Chat ƒë√£ ƒë∆∞·ª£c x√≥a! B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi nh√©! üòä");
    }
    
    // Public methods for game integration
    public void NotifyGameEvent(string eventType, string details = "")
    {
        if (!enableGameContext) return;
        
        StartCoroutine(ProcessGameEvent(eventType, details));
    }
    
    IEnumerator ProcessGameEvent(string eventType, string details)
    {
        if (isProcessing) yield break;
        
        yield return new WaitForSeconds(0.5f); // Brief delay
        
        // Get local reaction to game event
        string reaction = GetGameEventReaction(eventType, details);
        if (!string.IsNullOrEmpty(reaction))
        {
            AddAIMessage(reaction);
        }
    }
    
    string GetGameEventReaction(string eventType, string details)
    {
        switch (eventType.ToUpper())
        {
            case "AI_WIN":
                return "üèÜ Yayyy! T√¥i ƒë√£ th·∫Øng! Good game b·∫°n nh√©! üòÑ Ch∆°i l·∫°i kh√¥ng?";
                
            case "HUMAN_WIN":
            case "PLAYER_WIN":
                return "üòÆ Wow! B·∫°n ƒë√£ th·∫Øng t√¥i! Ch√∫c m·ª´ng nh√©! üëè L·∫ßn sau t√¥i s·∫Ω c·∫©n th·∫≠n h∆°n!";
                
            case "AI_MOVE":
                return "üòè ƒê√≥ l√† n∆∞·ªõc ƒëi c·ªßa t√¥i! B·∫°n nghƒ© sao? ü§î";
                
            case "WALL_PLACED":
                return "üß± ·ªí, c√≥ t∆∞·ªùng m·ªõi! Chi·∫øn thu·∫≠t thay ƒë·ªïi r·ªìi ƒë√¢y! üòà";
                
            case "CLOSE_GAME":
                return "üò∞ Game n√†y cƒÉng th·∫≥ng qu√°! Ai s·∫Ω th·∫Øng nh·ªâ? üíì";
                
            case "GOOD_MOVE":
                return "üëè N∆∞·ªõc ƒëi hay ƒë·∫•y! T√¥i ph·∫£i c·∫©n th·∫≠n r·ªìi! üß†";
                
            case "BAD_MOVE":
                return "ü§® Hmm, b·∫°n ch·∫Øc ch·∫Øn v·ªõi n∆∞·ªõc ƒëi ƒë√≥ kh√¥ng? üòè";
                
            default:
                return "üéÆ Game ƒëang di·ªÖn ra! T√¥i ƒëang ch√∫ √Ω t·ª´ng n∆∞·ªõc ƒëi c·ªßa b·∫°n! üëÄ";
        }
    }
    
    // Public methods for runtime configuration
    public void SetHybridMode(bool enabled)
    {
        useHybridMode = enabled;
        string mode = enabled ? "Hybrid (Local + API)" : "Local Only";
        AddSystemMessage($"üí° Chat mode changed to: {mode}");
        Debug.Log($"Chat mode: {mode}");
    }
    
    public void SetAPIKey(string newApiKey)
    {
        apiKey = newApiKey;
        bool hasValidKey = !string.IsNullOrEmpty(apiKey) && apiKey != "YOUR_API_KEY_HERE";
        
        if (hasValidKey)
        {
            AddSystemMessage("üîë API key updated! T√¥i gi·ªù c√≥ th·ªÉ tr·∫£ l·ªùi nh·ªØng c√¢u h·ªèi ph·ª©c t·∫°p h∆°n!");
        }
        else
        {
            AddSystemMessage("‚ÑπÔ∏è API key removed. T√¥i s·∫Ω ch·ªâ d√πng ki·∫øn th·ª©c local.");
        }
    }
    
    public void TestAPIConnection()
    {
        if (string.IsNullOrEmpty(apiKey) || apiKey == "YOUR_API_KEY_HERE")
        {
            AddSystemMessage("‚ùå No API key configured for testing.");
            return;
        }
        
        StartCoroutine(TestAPICoroutine());
    }
    
    IEnumerator TestAPICoroutine()
    {
        AddSystemMessage("üîÑ Testing API connection...");
        
        // Simple test message
        string testMessage = "Test connection - please respond with 'API working' in Vietnamese";
        yield return StartCoroutine(CallAdvancedAPI(testMessage));
    }
    
    IEnumerator CallAdvancedAPI(string userMessage)
    {
        Debug.Log("ÔøΩÔøΩ Calling Gemini API (OpenAI_APIManager style) for advanced question...");
        RemoveThinkingMessage();
        string url = $"https://generativelanguage.googleapis.com/v1beta/models/{modelName}:generateContent?key={apiKey}";
        string json = "{\n" +
                      "  \"contents\": [{\n" +
                      "    \"parts\": [{\n" +
                      "      \"text\": \"" + EscapeJson(userMessage) + "\"\n" +
                      "    }]\n" +
                      "  }]\n" +
                      "}";
        byte[] bodyRaw = Encoding.UTF8.GetBytes(json);
        UnityWebRequest request = new UnityWebRequest(url, "POST");
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "application/json");
        yield return request.SendWebRequest();
        if (request.result == UnityWebRequest.Result.Success)
        {
            try
            {
                GeminiResponse response = JsonUtility.FromJson<GeminiResponse>(request.downloadHandler.text);
                if (response.candidates != null && response.candidates.Length > 0)
                {
                    string reply = response.candidates[0].content.parts[0].text;
                    AddAIMessage(reply);
                    Debug.Log("‚úÖ Gemini API response received successfully");
                }
                else
                {
                    AddAIMessage("Hmm, t√¥i kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi r√µ r√†ng t·ª´ Gemini. H√£y th·ª≠ h·ªèi l·∫°i nh√©! üòÖ");
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"Error parsing Gemini API response: {e.Message}");
                AddAIMessage("C√≥ v·∫ª nh∆∞ t√¥i g·∫∑p kh√≥ khƒÉn trong vi·ªác x·ª≠ l√Ω c√¢u h·ªèi n√†y. Th·ª≠ h·ªèi c√°ch kh√°c nh√©! ü§î");
            }
        }
        else
        {
            Debug.LogWarning($"Gemini API request failed: {request.error}");
            string fallbackResponse = GetEnhancedFallbackResponse(userMessage);
            AddAIMessage($"üîå Gemini API hi·ªán kh√¥ng kh·∫£ d·ª•ng, nh∆∞ng t√¥i v·∫´n c√≥ th·ªÉ tr·∫£ l·ªùi:\n\n{fallbackResponse}");
        }
        request.Dispose();
    }

    string EscapeJson(string str)
    {
        return str.Replace("\\", "\\\\").Replace("\"", "\\\"");
    }

    [System.Serializable]
    public class GeminiResponse
    {
        public Candidate[] candidates;
    }
    [System.Serializable]
    public class Candidate
    {
        public Content content;
    }
    [System.Serializable]
    public class Content
    {
        public Part[] parts;
    }
    [System.Serializable]
    public class Part
    {
        public string text;
    }
}


// ========== DATA STRUCTURES ==========

[System.Serializable]
public class BasicChatMessage
{
    public string role; // "system", "user", "assistant"
    public string content;
}

// Gemini API Response Structures
[System.Serializable]
public class GeminiAPIResponse
{
    public GeminiCandidate[] candidates;
    public GeminiUsageMetadata usageMetadata;
}

[System.Serializable]
public class GeminiCandidate
{
    public GeminiContent content;
    public string finishReason;
    public int index;
    public GeminiSafetyRating[] safetyRatings;
}

[System.Serializable]
public class GeminiContent
{
    public GeminiPart[] parts;
    public string role;
}

[System.Serializable]
public class GeminiPart
{
    public string text;
}

[System.Serializable]
public class GeminiSafetyRating
{
    public string category;
    public string probability;
}

[System.Serializable]
public class GeminiUsageMetadata
{
    public int promptTokenCount;
    public int candidatesTokenCount;
    public int totalTokenCount;
}

// Legacy OpenAI structures (kept for compatibility)
[System.Serializable]
public class ChatAPIResponse
{
    public ChatChoice[] choices;
}

[System.Serializable]
public class ChatChoice
{
    public BasicChatMessage message;
    public string finish_reason;
}

[System.Serializable]
public class BasicGameState
{
    public Vector2Int aiPosition;
    public Vector2Int humanPosition;
    public bool gameEnded;
    public string winner;
}
