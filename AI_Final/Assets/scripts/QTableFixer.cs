using UnityEngine;
using System.IO;
using System.Collections.Generic;

/// <summary>
/// Script ƒë·ªÉ fix c√°c v·∫•n ƒë·ªÅ v·ªõi Q-table
/// </summary>
public class QTableFixer : MonoBehaviour
{
    [Header("Q-Table Settings")]
    public string qTablePath = "Assets/qtable.json";
    public bool autoFixOnStart = true;
    public bool deleteCorruptedFile = true;
    
    void Start()
    {
        if (autoFixOnStart)
        {
            FixQTable();
        }
    }
    
    [ContextMenu("Fix Q-Table")]
    public void FixQTable()
    {
        Debug.Log("üîß Starting to fix Q-table issues...");
        
        if (deleteCorruptedFile)
        {
            DeleteCorruptedQTable();
        }
        
        CreateFreshQTable();
        
        Debug.Log("‚úÖ Q-table fix complete!");
    }
    
    /// <summary>
    /// X√≥a file Q-table b·ªã l·ªói
    /// </summary>
    void DeleteCorruptedQTable()
    {
        if (File.Exists(qTablePath))
        {
            try
            {
                File.Delete(qTablePath);
                Debug.Log($"üóëÔ∏è Deleted corrupted Q-table file: {qTablePath}");
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå Error deleting Q-table file: {e.Message}");
            }
        }
        else
        {
            Debug.Log($"‚ÑπÔ∏è Q-table file not found: {qTablePath}");
        }
    }
    
    /// <summary>
    /// T·∫°o Q-table m·ªõi
    /// </summary>
    void CreateFreshQTable()
    {
        try
        {
            // T·∫°o Q-table r·ªóng nh∆∞ng h·ª£p l·ªá
            var emptyQTable = new Dictionary<string, Dictionary<string, float>>();
            
            // Th√™m m·ªôt s·ªë state m·∫´u
            string sampleState = "4,0-4,8-10-10-";
            emptyQTable[sampleState] = new Dictionary<string, float>();
            emptyQTable[sampleState]["M:4,1"] = 0.1f;
            emptyQTable[sampleState]["M:3,0"] = 0.1f;
            emptyQTable[sampleState]["M:5,0"] = 0.1f;
            
            // Serialize v√† l∆∞u
            var serialization = new Serialization<string, Dictionary<string, float>>(emptyQTable);
            string jsonContent = JsonUtility.ToJson(serialization, true);
            
            // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
            string directory = Path.GetDirectoryName(qTablePath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
            
            // Ghi file
            File.WriteAllText(qTablePath, jsonContent);
            Debug.Log($"‚úÖ Created fresh Q-table at: {qTablePath}");
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå Error creating fresh Q-table: {e.Message}");
        }
    }
    
    /// <summary>
    /// Reset Q-table v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
    /// </summary>
    [ContextMenu("Reset Q-Table")]
    public void ResetQTable()
    {
        Debug.Log("üîÑ Resetting Q-table...");
        
        DeleteCorruptedQTable();
        CreateFreshQTable();
        
        Debug.Log("‚úÖ Q-table reset complete!");
    }
    
    /// <summary>
    /// Ki·ªÉm tra Q-table c√≥ h·ª£p l·ªá kh√¥ng
    /// </summary>
    [ContextMenu("Validate Q-Table")]
    public void ValidateQTable()
    {
        if (!File.Exists(qTablePath))
        {
            Debug.LogWarning("‚ö†Ô∏è Q-table file does not exist!");
            return;
        }
        
        try
        {
            string jsonContent = File.ReadAllText(qTablePath);
            if (string.IsNullOrEmpty(jsonContent))
            {
                Debug.LogWarning("‚ö†Ô∏è Q-table file is empty!");
                return;
            }
            
            var serialization = JsonUtility.FromJson<Serialization<string, Dictionary<string, float>>>(jsonContent);
            if (serialization != null && serialization.keys != null && serialization.values != null)
            {
                Debug.Log("‚úÖ Q-table is valid!");
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è Q-table is corrupted!");
            }
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå Q-table validation error: {e.Message}");
        }
    }
} 