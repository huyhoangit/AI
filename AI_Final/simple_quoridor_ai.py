"""
Simple Quoridor AI - Local Python Server
Kh√¥ng c·∫ßn t·∫£i model l·ªõn, ch·ªâ c·∫ßn Python + Flask
"""

import json
import re
from flask import Flask, request, jsonify
from datetime import datetime
import random
import os

class QuoridorAI:
    def __init__(self):
        self.knowledge_base = self.load_training_data()
        self.conversation_history = []
        self.learning_file = "ai_learning_data.json"
        self.load_learning_data()
        
    def load_training_data(self):
        """Load game knowledge base"""
        return {
            "quoridor_rules": [
                "Quoridor l√† game c·ªù chi·∫øn thu·∫≠t cho 2-4 ng∆∞·ªùi ch∆°i tr√™n b√†n c·ªù 9x9",
                "M·ª•c ti√™u l√† ƒë∆∞a qu√¢n c·ªù c·ªßa b·∫°n v·ªÅ ƒë√≠ch ·ªü ph√≠a ƒë·ªëi di·ªán",
                "M·ªói ng∆∞·ªùi ch∆°i c√≥ 10 b·ª©c t∆∞·ªùng ƒë·ªÉ ch·∫∑n ƒë·ªëi th·ªß",
                "T∆∞·ªùng ph·∫£i ƒë·∫£m b·∫£o c√≤n √≠t nh·∫•t 1 ƒë∆∞·ªùng ƒëi cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i",
                "M·ªói l∆∞·ª£t c√≥ th·ªÉ di chuy·ªÉn qu√¢n c·ªù ho·∫∑c ƒë·∫∑t 1 b·ª©c t∆∞·ªùng"
            ],
            "strategies": [
                "∆Øu ti√™n ti·∫øn th·∫≥ng v·ªÅ ph√≠a tr∆∞·ªõc khi c√≥ th·ªÉ",
                "S·ª≠ d·ª•ng t∆∞·ªùng ƒë·ªÉ ch·∫∑n khi ƒë·ªëi th·ªß g·∫ßn ƒë√≠ch",
                "Kh√¥ng l√£ng ph√≠ t∆∞·ªùng qu√° s·ªõm trong game",
                "Lu√¥n gi·ªØ ƒë∆∞·ªùng tho√°t cho ch√≠nh m√¨nh",
                "Quan s√°t v·ªã tr√≠ ƒë·ªëi th·ªß ƒë·ªÉ ƒë·∫∑t t∆∞·ªùng hi·ªáu qu·∫£",
                "D√πng t∆∞·ªùng t·∫°o m√™ cung ƒë·ªÉ l√†m ch·∫≠m ƒë·ªëi th·ªß"
            ],
            "movement_rules": [
                "Qu√¢n c·ªù c√≥ th·ªÉ di chuy·ªÉn 1 √¥ theo 4 h∆∞·ªõng: l√™n, xu·ªëng, tr√°i, ph·∫£i",
                "Kh√¥ng th·ªÉ ƒëi qua t∆∞·ªùng ho·∫∑c ra ngo√†i b√†n c·ªù",
                "N·∫øu c√≥ qu√¢n ƒë·ªëi th·ªß ·ªü √¥ k·∫ø b√™n, c√≥ th·ªÉ nh·∫£y qua",
                "Khi nh·∫£y qua ƒë·ªëi th·ªß b·ªã ch·∫∑n b·ªüi t∆∞·ªùng, c√≥ th·ªÉ ƒëi ch√©o"
            ],
            "wall_rules": [
                "T∆∞·ªùng c√≥ th·ªÉ ƒë·∫∑t ngang ho·∫∑c d·ªçc gi·ªØa c√°c √¥",
                "M·ªói t∆∞·ªùng chi·∫øm 2 kho·∫£ng tr·ªëng li√™n ti·∫øp",
                "Kh√¥ng th·ªÉ ƒë·∫∑t t∆∞·ªùng ch·ªìng l√™n t∆∞·ªùng kh√°c",
                "Ph·∫£i ƒë·∫£m b·∫£o t·∫•t c·∫£ ng∆∞·ªùi ch∆°i v·∫´n c√≥ ƒë∆∞·ªùng ƒëi v·ªÅ ƒë√≠ch"
            ],
            "common_questions": {
                "quoridor l√† g√¨": "Quoridor l√† game board strategy n·ªïi ti·∫øng cho 2-4 ng∆∞·ªùi ch∆°i. B·∫°n c·∫ßn ƒë∆∞a qu√¢n c·ªù qua b√™n kia b√†n c·ªù trong khi s·ª≠ d·ª•ng t∆∞·ªùng ƒë·ªÉ ch·∫∑n ƒë·ªëi th·ªß.",
                "lu·∫≠t ch∆°i": "M·ªói l∆∞·ª£t b·∫°n c√≥ th·ªÉ di chuy·ªÉn qu√¢n c·ªù 1 √¥ ho·∫∑c ƒë·∫∑t 1 b·ª©c t∆∞·ªùng. M·ª•c ti√™u l√† v·ªÅ ƒë√≠ch tr∆∞·ªõc ƒë·ªëi th·ªß.",
                "chi·∫øn thu·∫≠t": "C√¢n b·∫±ng gi·ªØa ti·∫øn v·ªÅ ph√≠a tr∆∞·ªõc v√† s·ª≠ d·ª•ng t∆∞·ªùng ƒë·ªÉ ch·∫∑n ƒë·ªëi th·ªß. ƒê·ª´ng d√πng h·∫øt t∆∞·ªùng qu√° s·ªõm!",
                "t∆∞·ªùng": "B·∫°n c√≥ 10 b·ª©c t∆∞·ªùng ƒë·ªÉ ch·∫∑n ƒë·ªëi th·ªß, nh∆∞ng ph·∫£i ƒë·∫£m b·∫£o h·ªç v·∫´n c√≥ ƒë∆∞·ªùng ƒëi v·ªÅ ƒë√≠ch.",
                "di chuy·ªÉn": "Qu√¢n c·ªù di chuy·ªÉn 1 √¥ m·ªói l∆∞·ª£t. C√≥ th·ªÉ nh·∫£y qua ƒë·ªëi th·ªß n·∫øu kh√¥ng b·ªã t∆∞·ªùng ch·∫∑n.",
                "th·∫Øng": "Ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë∆∞a qu√¢n c·ªù v·ªÅ h√†ng ƒë·ªëi di·ªán s·∫Ω th·∫Øng.",
                "thua": "B·∫°n thua n·∫øu ƒë·ªëi th·ªß v·ªÅ ƒë√≠ch tr∆∞·ªõc ho·∫∑c b·∫°n kh√¥ng c√≤n n∆∞·ªõc ƒëi h·ª£p l·ªá."
            }
        }
    
    def load_learning_data(self):
        """Load previously learned data"""
        if os.path.exists(self.learning_file):
            try:
                with open(self.learning_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.conversation_history = data.get('conversations', [])
                    learned = data.get('learned_patterns', {})
                    if learned:
                        self.knowledge_base['learned_patterns'] = learned
                print(f"üìö Loaded {len(self.conversation_history)} previous conversations")
            except Exception as e:
                print(f"‚ö†Ô∏è Could not load learning data: {e}")
    
    def save_learning_data(self):
        """Save learning data to file"""
        try:
            data = {
                'conversations': self.conversation_history[-100:],  # Keep last 100
                'learned_patterns': self.knowledge_base.get('learned_patterns', {})
            }
            with open(self.learning_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è Could not save learning data: {e}")
    
    def train_with_conversation(self, user_input, ai_response, feedback=None):
        """Learn from conversation"""
        conversation = {
            "input": user_input.lower(),
            "response": ai_response,
            "timestamp": datetime.now().isoformat(),
            "feedback": feedback
        }
        
        self.conversation_history.append(conversation)
        
        # Simple pattern learning
        words = user_input.lower().split()
        keywords = [word for word in words if len(word) > 3]  # Ignore short words
        
        if keywords:
            if 'learned_patterns' not in self.knowledge_base:
                self.knowledge_base['learned_patterns'] = {}
                
            pattern_key = ' '.join(keywords[:3])  # Use first 3 keywords
            if pattern_key not in self.knowledge_base['learned_patterns']:
                self.knowledge_base['learned_patterns'][pattern_key] = []
            
            self.knowledge_base['learned_patterns'][pattern_key].append(ai_response)
        
        # Auto-save every 10 conversations
        if len(self.conversation_history) % 10 == 0:
            self.save_learning_data()
    
    def get_response(self, user_input):
        """Generate response based on input"""
        user_input_clean = user_input.lower().strip()
        confidence = 0.5
        
        # Check exact matches first
        for question, answer in self.knowledge_base["common_questions"].items():
            if question in user_input_clean:
                confidence = 0.9
                return answer, confidence
        
        # Check learned patterns
        learned_patterns = self.knowledge_base.get('learned_patterns', {})
        for pattern, responses in learned_patterns.items():
            if all(word in user_input_clean for word in pattern.split()):
                confidence = 0.8
                return random.choice(responses), confidence
        
        # Keyword-based responses
        response = self.get_keyword_response(user_input_clean)
        if response:
            confidence = 0.7
            return response, confidence
        
        # Default responses
        defaults = [
            "T√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi n√†y. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ lu·∫≠t ch∆°i Quoridor, chi·∫øn thu·∫≠t, ho·∫∑c c√°ch di chuy·ªÉn kh√¥ng?",
            "H√£y h·ªèi t√¥i v·ªÅ Quoridor: lu·∫≠t ch∆°i, chi·∫øn thu·∫≠t, t∆∞·ªùng, ho·∫∑c c√°ch di chuy·ªÉn nh√©!",
            "T√¥i ƒëang h·ªçc th√™m! B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ game Quoridor c·ª• th·ªÉ h∆°n kh√¥ng?",
            "Quoridor c√≥ nhi·ªÅu ƒëi·ªÅu th√∫ v·ªã! B·∫°n mu·ªën bi·∫øt v·ªÅ lu·∫≠t ch∆°i hay chi·∫øn thu·∫≠t?"
        ]
        confidence = 0.3
        return random.choice(defaults), confidence
    
    def get_keyword_response(self, user_input):
        """Get response based on keywords"""
        # Game rules
        if any(word in user_input for word in ["quoridor", "game", "tr√≤ ch∆°i", "board"]):
            if any(word in user_input for word in ["lu·∫≠t", "rule", "ch∆°i", "c√°ch"]):
                return random.choice(self.knowledge_base["quoridor_rules"])
            elif any(word in user_input for word in ["chi·∫øn thu·∫≠t", "strategy", "th·∫Øng", "win"]):
                return random.choice(self.knowledge_base["strategies"])
        
        # Wall-related
        if any(word in user_input for word in ["t∆∞·ªùng", "wall", "ch·∫∑n", "block"]):
            return random.choice(self.knowledge_base["wall_rules"])
        
        # Movement-related
        if any(word in user_input for word in ["di chuy·ªÉn", "move", "ƒëi", "nh·∫£y", "jump"]):
            return random.choice(self.knowledge_base["movement_rules"])
        
        # Specific questions
        if any(word in user_input for word in ["th·∫Øng", "win", "chi·∫øn th·∫Øng"]):
            return "ƒê·ªÉ th·∫Øng Quoridor, b·∫°n c·∫ßn ƒë∆∞a qu√¢n c·ªù v·ªÅ h√†ng ƒë·ªëi di·ªán tr∆∞·ªõc ƒë·ªëi th·ªß. C√¢n b·∫±ng gi·ªØa ti·∫øn th·∫≥ng v√† d√πng t∆∞·ªùng ch·∫∑n!"
        
        if any(word in user_input for word in ["b·∫Øt ƒë·∫ßu", "start", "kh·ªüi ƒë·∫ßu"]):
            return "ƒê·ªÉ b·∫Øt ƒë·∫ßu ch∆°i Quoridor hi·ªáu qu·∫£, h√£y ti·∫øn th·∫≥ng v·ªÅ ph√≠a tr∆∞·ªõc v√† quan s√°t n∆∞·ªõc ƒëi c·ªßa ƒë·ªëi th·ªß. ƒê·ª´ng d√πng t∆∞·ªùng qu√° s·ªõm!"
        
        return None
    
    def get_stats(self):
        """Get AI statistics"""
        return {
            "total_conversations": len(self.conversation_history),
            "learned_patterns": len(self.knowledge_base.get('learned_patterns', {})),
            "knowledge_categories": len(self.knowledge_base),
            "last_conversation": self.conversation_history[-1]['timestamp'] if self.conversation_history else None
        }

# Flask API Server
app = Flask(__name__)
ai_model = QuoridorAI()

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        user_message = data.get('message', '')
        
        if not user_message:
            return jsonify({'error': 'No message provided'}), 400
        
        response, confidence = ai_model.get_response(user_message)
        
        # Learn from conversation
        ai_model.train_with_conversation(user_message, response)
        
        return jsonify({
            'response': response,
            'confidence': confidence,
            'source': 'local_python_ai',
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/train', methods=['POST'])
def train():
    try:
        data = request.get_json()
        user_input = data.get('input', '')
        ai_response = data.get('response', '')
        feedback = data.get('feedback', None)
        
        if not user_input or not ai_response:
            return jsonify({'error': 'Input and response required'}), 400
        
        ai_model.train_with_conversation(user_input, ai_response, feedback)
        ai_model.save_learning_data()
        
        return jsonify({
            'status': 'success',
            'message': 'Model trained successfully',
            'conversations': len(ai_model.conversation_history)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/status', methods=['GET'])
def status():
    try:
        stats = ai_model.get_stats()
        return jsonify({
            'status': 'running',
            'model': 'QuoridorAI v1.0',
            'uptime': datetime.now().isoformat(),
            'stats': stats
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/reset', methods=['POST'])
def reset():
    try:
        ai_model.conversation_history.clear()
        if 'learned_patterns' in ai_model.knowledge_base:
            ai_model.knowledge_base['learned_patterns'].clear()
        
        # Remove learning file
        if os.path.exists(ai_model.learning_file):
            os.remove(ai_model.learning_file)
        
        return jsonify({
            'status': 'success',
            'message': 'AI memory reset successfully'
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/export', methods=['GET'])
def export_data():
    try:
        export_data = {
            'knowledge_base': ai_model.knowledge_base,
            'conversation_history': ai_model.conversation_history[-50:],  # Last 50
            'export_time': datetime.now().isoformat()
        }
        return jsonify(export_data)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("ü§ñ Starting Quoridor AI Local Server...")
    print("üì° Server will run on: http://localhost:5000")
    print("üéØ Available endpoints:")
    print("  POST /chat - Chat with AI")
    print("  POST /train - Train AI with new data") 
    print("  GET /status - Check AI status")
    print("  POST /reset - Reset AI memory")
    print("  GET /export - Export AI data")
    print("\n‚ú® No external models needed - Pure Python AI!")
    print("üß† AI will learn and improve from conversations")
    
    app.run(host='localhost', port=5000, debug=False)
