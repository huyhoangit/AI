using UnityEngine;using UnityEditor;using System.IO;/// <summary>/// Force AI to retrain from scratch by clearing all Q-table data/// </summary>public class ForceRetrainAI : MonoBehaviour{    [ContextMenu("🔥 FORCE RETRAIN FROM SCRATCH")]    public void ForceRetrainFromScratch()    {        Debug.Log("🔥 FORCING AI TO RETRAIN FROM SCRATCH");                // 1. Delete all Q-table files        DeleteAllQTableFiles();                // 2. Reset all AI components        ResetAllAIComponents();                // 3. Enable training mode        EnableTrainingMode();                Debug.Log("✅ AI RESET COMPLETE - Will retrain from scratch on next play!");    }        void DeleteAllQTableFiles()    {        Debug.Log("🗑️ Deleting all Q-table files...");                string[] possiblePaths = {            "Assets/qtable.json",            "Assets/qtable_backup.json",             "Assets/StreamingAssets/qtable.json",            Path.Combine(Application.streamingAssetsPath, "qtable.json"),            Path.Combine(Application.dataPath, "qtable.json"),            Path.Combine(Application.dataPath, "StreamingAssets", "qtable.json"),            Path.Combine(Application.persistentDataPath, "qtable.json")        };                int deletedCount = 0;        foreach (string path in possiblePaths)        {            if (File.Exists(path))            {                try                {                    File.Delete(path);                    Debug.Log($"🗑️ Deleted: {path}");                    deletedCount++;                }                catch (System.Exception e)                {                    Debug.LogError($"❌ Failed to delete {path}: {e.Message}");                }            }        }                Debug.Log($"🗑️ Deleted {deletedCount} Q-table files");    }        void ResetAllAIComponents()    {        Debug.Log("🔄 Resetting all AI components...");                // Find all QuoridorAI components        QuoridorAI[] aiComponents = Object.FindObjectsOfType<QuoridorAI>();                foreach (QuoridorAI ai in aiComponents)        {            // Enable training mode            ai.allowQTableSaving = true;            ai.isTrainedModel = false;                        Debug.Log($"🔄 Reset AI component: {ai.name}");        }                // Find all Self-Play Trainers        QuoridorSelfPlayTrainer[] trainers = Object.FindObjectsOfType<QuoridorSelfPlayTrainer>();                foreach (QuoridorSelfPlayTrainer trainer in trainers)        {            // Disable auto-start training to preserve existing Q-table            trainer.autoStartTraining = false;            trainer.preserveExistingQTable = true;                        Debug.Log($"🔄 Reset trainer: {trainer.name} - Training disabled to preserve Q-table");        }                Debug.Log($"🔄 Reset {aiComponents.Length} AI components and {trainers.Length} trainers");    }        void EnableTrainingMode()    {        Debug.Log("🎓 Enabling training mode globally...");                QuoridorAI[] aiComponents = Object.FindObjectsOfType<QuoridorAI>();                foreach (QuoridorAI ai in aiComponents)        {            ai.EnableTrainingMode();        }                Debug.Log("🎓 Training mode enabled for all AI components");    }}#if UNITY_EDITOR/// <summary>/// Editor menu integration for force retrain/// </summary>public static class ForceRetrainAIEditor{    [MenuItem("Quoridor/🔥 Force Retrain AI from Scratch")]    public static void ForceRetrainFromScratchMenu()    {        Debug.Log("🔥 MENU: Force retraining AI from scratch...");                // Create temporary component to execute the reset        GameObject tempGO = new GameObject("TempForceRetrain");        ForceRetrainAI component = tempGO.AddComponent<ForceRetrainAI>();                component.ForceRetrainFromScratch();                // Clean up        UnityEngine.Object.DestroyImmediate(tempGO);                // Refresh AssetDatabase        AssetDatabase.Refresh();                Debug.Log("✅ MENU: Force retrain complete!");    }        [MenuItem("Quoridor/🔍 Check Q-Table Status")]    public static void CheckQTableStatus()    {        Debug.Log("🔍 CHECKING Q-TABLE STATUS...");                string[] possiblePaths = {            "Assets/qtable.json",            "Assets/qtable_backup.json",             "Assets/StreamingAssets/qtable.json"        };                bool foundAny = false;        foreach (string path in possiblePaths)        {            if (File.Exists(path))            {                FileInfo info = new FileInfo(path);                Debug.Log($"📁 Found: {path} ({info.Length} bytes, modified: {info.LastWriteTime})");                foundAny = true;            }        }                if (!foundAny)        {            Debug.Log("✅ No Q-table files found - AI will train from scratch!");        }                // Check AI component settings        QuoridorAI[] aiComponents = Object.FindObjectsOfType<QuoridorAI>();        foreach (QuoridorAI ai in aiComponents)        {            Debug.Log($"🤖 AI '{ai.name}': Training={ai.allowQTableSaving}, Trained={ai.isTrainedModel}, UseQL={ai.useQLearning}");        }                QuoridorSelfPlayTrainer[] trainers = Object.FindObjectsOfType<QuoridorSelfPlayTrainer>();        foreach (QuoridorSelfPlayTrainer trainer in trainers)        {            Debug.Log($"🎯 Trainer '{trainer.name}': AutoStart={trainer.autoStartTraining}, Preserve={trainer.preserveExistingQTable}");        }    }}#endif