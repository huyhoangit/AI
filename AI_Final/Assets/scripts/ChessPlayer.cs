using UnityEngine;

/// <summary>
/// Component cho qu√¢n chess trong game Quoridor
/// X·ª≠ l√Ω click v√† di chuy·ªÉn qu√¢n c·ªù
/// </summary>
public class ChessPlayer : MonoBehaviour
{
    [Header("Player Info")]
    public int playerID = 1; // 1 ho·∫∑c 2
    public int row = 0; // V·ªã tr√≠ hi·ªán t·∫°i - h√†ng
    public int col = 0; // V·ªã tr√≠ hi·ªán t·∫°i - c·ªôt (gi·ªØa b√†n c·ªù)
    public bool isInitializing = false; // Flag to indicate initialization mode
    
    // Properties for easier access
    public int currentX { get { return col; } }
    public int currentY { get { return row; } }
    
    [Header("Movement")]
    public bool isSelected = false;
    public Color selectedColor = Color.blue;
    public Color validMoveColor = Color.green;
    
    [Header("Wall Placement")]
    public WallPlacer wallPlacer; // Reference ƒë·∫øn WallPlacer
    
    private BoardManager boardManager;
    private MonoBehaviour gameManager; // Reference to GameManager
    private Renderer chessRenderer;
    private Material originalMaterial;
    private Vector2Int[] validMoves = new Vector2Int[4]; // 4 √¥ xung quanh
    
    void Start()
    {
        // T√¨m BoardManager
        boardManager = BoardManager.Instance;
        if (boardManager == null)
        {
            boardManager = FindFirstObjectByType<BoardManager>();
        }
        
        // T√¨m GameManager
        var gameManagerComponents = FindObjectsByType<MonoBehaviour>(FindObjectsSortMode.None);
        foreach (var component in gameManagerComponents)
        {
            if (component.GetType().Name == "GameManager")
            {
                gameManager = component;
                break;
            }
        }
        
        // T√¨m WallPlacer n·∫øu ch∆∞a assign
        if (wallPlacer == null)
        {
            // T√¨m WallPlacer c√≥ c√πng playerID
            var allWallPlacers = FindObjectsByType<MonoBehaviour>(FindObjectsSortMode.None);
            foreach (var component in allWallPlacers)
            {
                if (component.GetType().Name == "WallPlacer")
                {
                    var playerIDField = component.GetType().GetField("playerID");
                    if (playerIDField != null)
                    {
                        int wallPlayerID = (int)playerIDField.GetValue(component);
                        if (wallPlayerID == playerID)
                        {
                            // T√¨m th·∫•y WallPlacer c√πng playerID
                            Debug.Log($"‚úÖ Found WallPlacer for Player {playerID}");
                            break;
                        }
                    }
                }
            }
        }
        
        // L·∫•y renderer
        chessRenderer = GetComponent<Renderer>();
        if (chessRenderer != null)
        {
            originalMaterial = chessRenderer.material;
        }
        
        // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu
        // UpdatePosition();
    }
    
    void Update()
    {
        // Ch·ªâ x·ª≠ l√Ω input n·∫øu player n√†y ƒë∆∞·ª£c ch·ªçn
        //if (!isSelected) return;
        
        // Ph√≠m R ƒë·ªÉ toggle wall placement mode - v·ªõi input protection
        if (InputStateManager.Instance != null ? 
            InputStateManager.Instance.GetKeyDownSafe(KeyCode.R) : 
            Input.GetKeyDown(KeyCode.R))
        {
            ToggleWallPlacement();
        }
        
        // Ph√≠m Escape ƒë·ªÉ b·ªè ch·ªçn
        if (Input.GetKeyDown(KeyCode.Escape))
        {
            DeselectPiece();
        }
    }
    
    /// <summary>
    /// Toggle ch·∫ø ƒë·ªô ƒë·∫∑t wall
    /// </summary>
    void ToggleWallPlacement()
    {
        // S·ª≠ d·ª•ng reflection ƒë·ªÉ g·ªçi WallPlacer
        var allWallPlacers = FindObjectsByType<MonoBehaviour>(FindObjectsSortMode.None);
        foreach (var component in allWallPlacers)
        {
            if (component.GetType().Name == "WallPlacer")
            {
                var playerIDField = component.GetType().GetField("playerID");
                if (playerIDField != null)
                {
                    int wallPlayerID = (int)playerIDField.GetValue(component);
                    if (wallPlayerID == playerID)
                    {
                        // G·ªçi ToggleWallPlaceMode
                        var method = component.GetType().GetMethod("ToggleWallPlaceMode");
                        if (method != null)
                        {
                            method.Invoke(component, null);
                            Debug.Log($"üß± Player {playerID} toggled wall placement mode");
                        }
                        break;
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// C·∫≠p nh·∫≠t v·ªã tr√≠ th·ª±c t·∫ø tr√™n board
    /// </summary>
    void UpdatePosition()
    {
        if (boardManager != null)
        {
            Vector3 worldPos = boardManager.GetSquareWorldPosition(row, col);
            transform.position = worldPos + Vector3.up; // N√¢ng l√™n tr√™n √¥ m·ªôt ch√∫t
        }
    }
    
    /// <summary>
    /// X·ª≠ l√Ω khi click v√†o qu√¢n chess
    /// </summary>
    void OnMouseDown()
    {
        // Ki·ªÉm tra c√≥ ph·∫£i l∆∞·ª£t c·ªßa player n√†y kh√¥ng
        if (!IsMyTurn())
        {
            Debug.Log($"‚è≥ Not Player {playerID}'s turn");
            return;
        }
        
        if (isSelected)
        {
            // N·∫øu ƒë√£ ch·ªçn r·ªìi th√¨ b·ªè ch·ªçn
            DeselectPiece();
        }
        else
        {
            // Ch·ªçn qu√¢n v√† hi·ªÉn th·ªã n∆∞·ªõc ƒëi h·ª£p l·ªá
            SelectPiece();
        }
    }
    
    /// <summary>
    /// Ch·ªçn qu√¢n c·ªù v√† highlight c√°c √¥ c√≥ th·ªÉ di chuy·ªÉn
    /// </summary>
    public void SelectPiece()
    {
        Debug.Log($"üéØ Selected Player {playerID} at [{row}, {col}]");
        
        isSelected = true;
        
        // ƒê·ªïi m√†u qu√¢n c·ªù ƒë·ªÉ hi·ªÉn th·ªã ƒë√£ ch·ªçn
        if (chessRenderer != null)
        {
            chessRenderer.material.color = selectedColor;
        }
        
        // T√≠nh to√°n v√† highlight c√°c √¥ c√≥ th·ªÉ di chuy·ªÉn
        CalculateValidMoves();
        HighlightValidMoves();
    }
    
    /// <summary>
    /// B·ªè ch·ªçn qu√¢n c·ªù
    /// </summary>
    public void DeselectPiece()
    {
        Debug.Log($"üîÑ Deselected Player {playerID}");
        
        isSelected = false;
        
        // Tr·ªü l·∫°i m√†u g·ªëc
        if (chessRenderer != null && originalMaterial != null)
        {
            chessRenderer.material = originalMaterial;
        }
        
        // X√≥a highlight
        ClearValidMoveHighlights();
    }
    
    /// <summary>
    /// T√≠nh to√°n 4 √¥ xung quanh c√≥ th·ªÉ di chuy·ªÉn (ki·ªÉm tra c·∫£ wall)
    /// </summary>
    void CalculateValidMoves()
    {
        // 4 h∆∞·ªõng: l√™n, xu·ªëng, tr√°i, ph·∫£i
        Vector2Int[] directions = {
            Vector2Int.up,      // L√™n (row + 1)
            Vector2Int.down,    // Xu·ªëng (row - 1)
            Vector2Int.left,    // Tr√°i (col - 1)
            Vector2Int.right    // Ph·∫£i (col + 1)
        };
        
        for (int i = 0; i < 4; i++)
        {
            Vector2Int newPos = new Vector2Int(col, row) + directions[i];
            
            // Ki·ªÉm tra trong bounds c·ªßa b√†n c·ªù (0-8)
            if (IsValidPosition(newPos.x, newPos.y))
            {
                // Ki·ªÉm tra xem c√≥ wall ch·∫∑n ƒë∆∞·ªùng ƒëi kh√¥ng
                if (!IsBlockedByWall(col, row, newPos.x, newPos.y))
                {
                    validMoves[i] = newPos;
                }
                else
                {
                    validMoves[i] = new Vector2Int(-1, -1); // B·ªã wall ch·∫∑n
                    Debug.Log($"üö´ Movement from [{col},{row}] to [{newPos.x},{newPos.y}] blocked by wall");
                }
            }
            else
            {
                validMoves[i] = new Vector2Int(-1, -1); // Kh√¥ng h·ª£p l·ªá
            }
        }
    }
    
    /// <summary>
    /// Ki·ªÉm tra v·ªã tr√≠ c√≥ h·ª£p l·ªá kh√¥ng (trong bounds 9x9)
    /// </summary>
    bool IsValidPosition(int col, int row)
    {
        return col >= 0 && col < 9 && row >= 0 && row < 9;
    }
    
    /// <summary>
    /// Highlight c√°c √¥ c√≥ th·ªÉ di chuy·ªÉn b·∫±ng m√†u xanh l√°
    /// </summary>
    void HighlightValidMoves()
    {
        if (boardManager == null) return;
        
        for (int i = 0; i < validMoves.Length; i++)
        {
            Vector2Int move = validMoves[i];
            if (move.x >= 0 && move.y >= 0) // N∆∞·ªõc ƒëi h·ª£p l·ªá
            {
                GameObject square = boardManager.GetSquareAt(move.y, move.x);
                if (square != null)
                {
                    Renderer squareRenderer = square.GetComponent<Renderer>();
                    if (squareRenderer != null)
                    {
                        squareRenderer.material.color = validMoveColor; // M√†u xanh l√°
                    }
                    
                    // Th√™m component ƒë·ªÉ x·ª≠ l√Ω click v√†o √¥ di chuy·ªÉn
                    ChessMoveTarget moveTarget = square.GetComponent<ChessMoveTarget>();
                    if (moveTarget == null)
                    {
                        moveTarget = square.AddComponent<ChessMoveTarget>();
                    }
                    moveTarget.Initialize(move.x, move.y, this);
                }
            }
        }
    }
    
    /// <summary>
    /// X√≥a highlight c√°c √¥ di chuy·ªÉn
    /// </summary>
    void ClearValidMoveHighlights()
    {
        if (boardManager == null) return;
        
        for (int i = 0; i < validMoves.Length; i++)
        {
            Vector2Int move = validMoves[i];
            if (move.x >= 0 && move.y >= 0)
            {
                GameObject square = boardManager.GetSquareAt(move.y, move.x);
                if (square != null)
                {
                    // Reset m√†u √¥ v·ªÅ m·∫∑c ƒë·ªãnh
                    boardManager.HighlightSquare(move.y, move.x, false);
                    
                    // X√≥a component di chuy·ªÉn
                    ChessMoveTarget moveTarget = square.GetComponent<ChessMoveTarget>();
                    if (moveTarget != null)
                    {
                        Destroy(moveTarget);
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// Di chuy·ªÉn qu√¢n c·ªù ƒë·∫øn v·ªã tr√≠ m·ªõi
    /// </summary>
    public void MoveTo(int newCol, int newRow)
    {
        // Ki·ªÉm tra n∆∞·ªõc ƒëi c√≥ h·ª£p l·ªá kh√¥ng
        bool validMove = false;
        for (int i = 0; i < validMoves.Length; i++)
        {
            if (validMoves[i].x == newCol && validMoves[i].y == newRow)
            {
                validMove = true;
                break;
            }
        }
        
        if (!validMove)
        {
            Debug.LogWarning($"‚ùå Invalid move to [{newCol}, {newRow}]");
            return;
        }
        
        Debug.Log($"‚úÖ Player {playerID} moved from [{col}, {row}] to [{newCol}, {newRow}]");
        
        // C·∫≠p nh·∫≠t v·ªã tr√≠
        col = newCol;
        row = newRow;
        
        // Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ m·ªõi
        UpdatePosition();
        
        // B·ªè ch·ªçn qu√¢n
        DeselectPiece();
        
        // Th√¥ng b√°o cho GameManager v·ªÅ l∆∞·ª£t ƒëi
        if (gameManager != null)
        {
            var method = gameManager.GetType().GetMethod("OnPlayerMove");
            if (method != null)
            {
                method.Invoke(gameManager, new object[] { playerID });
            }
        }
    }
    
    /// <summary>
    /// Set position for AI moves (public method for GameManager)
    /// </summary>
    public void SetPosition(int newCol, int newRow)
    {
        Debug.Log($"ü§ñ SETPOSITION: Player {playerID} moving from [{col}, {row}] to [{newCol}, {newRow}]");
        
        // Skip validation during initialization
        if (!isInitializing)
        {
            // VALIDATION: Ensure move is only one step
            int deltaX = Mathf.Abs(newCol - col);
            int deltaY = Mathf.Abs(newRow - row);
            
            if (deltaX + deltaY > 1)
            {
                Debug.LogError($"‚ùå CRITICAL: Player {playerID} trying to make invalid move! Distance: {deltaX + deltaY}");
                return; // Don't allow the move
            }
        }
        else
        {
            Debug.Log($"üîß INITIALIZATION: Player {playerID} teleporting to starting position [{newCol}, {newRow}]");
        }
        
        col = newCol;
        row = newRow;
        UpdatePosition();
        
        Debug.Log($"ü§ñ SETPOSITION COMPLETE: Player {playerID} now at [{col}, {row}]");
    }
    
    /// <summary>
    /// Set initial position (for game initialization only)
    /// </summary>
    public void SetInitialPosition(int newCol, int newRow)
    {
        Debug.Log($"üéÆ INITIAL POSITION SET: Player {playerID} at [{newCol}, {newRow}]");
        
        col = newCol;
        row = newRow;
        
        // Force update transform position immediately
        UpdatePosition();
        
        // Double-check the values are set correctly
        Debug.Log($"üîç After SetInitialPosition: Player {playerID} - col={col}, row={row}, currentX={currentX}, currentY={currentY}");
        Debug.Log($"‚úÖ Player {playerID} initialized at [{col}, {row}] (World pos: {transform.position})");
    }
    
    /// <summary>
    /// Ki·ªÉm tra c√≥ ph·∫£i l∆∞·ª£t c·ªßa player n√†y kh√¥ng
    /// </summary>
    public bool IsMyTurn()
    {
        // Ki·ªÉm tra l∆∞·ª£t ch∆°i d·ª±a tr√™n playerID v·ªõi reflection
        if (gameManager != null)
        {
            var method = gameManager.GetType().GetMethod("IsCurrentPlayer");
            if (method != null)
            {
                return (bool)method.Invoke(gameManager, new object[] { playerID });
            }
        }
        return true; // Default to true if no GameManager found
    }
    
    /// <summary>
    /// Ki·ªÉm tra xem c√≥ wall n√†o ch·∫∑n ƒë∆∞·ªùng ƒëi t·ª´ v·ªã tr√≠ A ƒë·∫øn v·ªã tr√≠ B kh√¥ng
    /// </summary>
    bool IsBlockedByWall(int fromCol, int fromRow, int toCol, int toRow)
    {
        // T√¨m t·∫•t c·∫£ c√°c wall ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t (th·ª≠ c·∫£ 2 tag)
        GameObject[] placedWalls1 = GameObject.FindGameObjectsWithTag("PlacedWall");
        GameObject[] placedWalls2 = GameObject.FindGameObjectsWithTag("Wall");
        
        // G·ªôp 2 m·∫£ng
        GameObject[] allWalls = new GameObject[placedWalls1.Length + placedWalls2.Length];
        placedWalls1.CopyTo(allWalls, 0);
        placedWalls2.CopyTo(allWalls, placedWalls1.Length);
        
        if (allWalls.Length == 0) 
        {
            Debug.Log($"‚úÖ No walls found - movement from [{fromCol},{fromRow}] to [{toCol},{toRow}] is FREE");
            return false; // Kh√¥ng c√≥ wall n√†o
        }
        
        Debug.Log($"üîç Checking wall blocking from [{fromCol},{fromRow}] to [{toCol},{toRow}]. Found {allWalls.Length} walls");
        
        // X√°c ƒë·ªãnh h∆∞·ªõng di chuy·ªÉn
        int deltaCol = toCol - fromCol;
        int deltaRow = toRow - fromRow;
        
        // Validate movement (should be exactly 1 step)
        if (Mathf.Abs(deltaCol) + Mathf.Abs(deltaRow) != 1)
        {
            Debug.LogError($"‚ùå Invalid movement: [{fromCol},{fromRow}] to [{toCol},{toRow}] - not a single step!");
            return true; // Block invalid moves
        }
        
        string movementDirection = "";
        if (deltaCol == 1) movementDirection = "RIGHT";
        else if (deltaCol == -1) movementDirection = "LEFT"; 
        else if (deltaRow == 1) movementDirection = "UP";
        else if (deltaRow == -1) movementDirection = "DOWN";
        
        Debug.Log($"üéØ Movement direction: {movementDirection}");
        
        foreach (GameObject wall in allWalls)
        {
            if (wall == null) continue;
            
            Vector3 wallPos = wall.transform.position;
            bool isHorizontalWall = IsHorizontalWall(wall);
            
            Debug.Log($"üß± Analyzing wall '{wall.name}' at {wallPos}, horizontal: {isHorizontalWall}");
            
            // Ki·ªÉm tra xem wall n√†y c√≥ ch·∫∑n ƒë∆∞·ªùng ƒëi kh√¥ng
            if (IsWallBlocking(fromCol, fromRow, deltaCol, deltaRow, wallPos, isHorizontalWall))
            {
                Debug.Log($"üö´ MOVEMENT BLOCKED! Wall '{wall.name}' blocks {movementDirection} movement");
                return true; // C√≥ wall ch·∫∑n
            }
        }
        
        Debug.Log($"‚úÖ No walls blocking {movementDirection} movement from [{fromCol},{fromRow}] to [{toCol},{toRow}]");
        return false; // Kh√¥ng c√≥ wall ch·∫∑n
    }
    
    /// <summary>
    /// Ki·ªÉm tra xem wall l√† horizontal hay vertical d·ª±a tr√™n scale v√† t√™n - ENHANCED VERSION
    /// </summary>
    bool IsHorizontalWall(GameObject wall)
    {
        // PRIORITY 1: Ki·ªÉm tra t√™n wall tr∆∞·ªõc (reliable nh·∫•t)
        string wallName = wall.name.ToLower();
        
        // Horizontal wall indicators
        if (wallName.Contains("_h_") || wallName.EndsWith("_h") || 
            wallName.Contains("horizontal") || wallName.Contains("horiz"))
        {
            Debug.Log($"üß± Wall '{wall.name}' detected as HORIZONTAL by name");
            return true;
        }
        
        // Vertical wall indicators  
        if (wallName.Contains("_v_") || wallName.EndsWith("_v") || 
            wallName.Contains("vertical") || wallName.Contains("vert"))
        {
            Debug.Log($"üß± Wall '{wall.name}' detected as VERTICAL by name");
            return false;
        }
        
        // PRIORITY 2: Ki·ªÉm tra scale/rotation
        Vector3 scale = wall.transform.localScale;
        Vector3 rotation = wall.transform.eulerAngles;
        
        // Ki·ªÉm tra rotation tr∆∞·ªõc (n·∫øu wall ƒë∆∞·ª£c rotate)
        float yRotation = Mathf.Abs(rotation.y);
        if (Mathf.Abs(yRotation - 90f) < 30f || Mathf.Abs(yRotation - 270f) < 30f)
        {
            // Wall ƒë∆∞·ª£c rotate 90 ƒë·ªô -> c√≥ th·ªÉ ƒë·ªïi orientation
            bool isHorizontalByRotation = scale.z > scale.x; // Sau khi rotate, Z tr·ªü th√†nh chi·ªÅu d√†i ngang
            Debug.Log($"ÔøΩ Wall '{wall.name}' rotated {yRotation}¬∞ -> horizontal: {isHorizontalByRotation}");
            return isHorizontalByRotation;
        }
        
        // PRIORITY 3: Fallback - ki·ªÉm tra scale th√¥ng th∆∞·ªùng
        bool isHorizontalByScale = scale.x > scale.z;
        Debug.Log($"üîß Wall '{wall.name}' scale check: {scale} -> horizontal: {isHorizontalByScale}");
        
        return isHorizontalByScale;
    }
    
    /// <summary>
    /// Ki·ªÉm tra xem m·ªôt wall c·ª• th·ªÉ c√≥ ch·∫∑n ƒë∆∞·ªùng ƒëi kh√¥ng
    /// </summary>
    bool IsWallBlocking(int fromCol, int fromRow, int deltaCol, int deltaRow, Vector3 wallPos, bool isHorizontalWall)
    {
        // CRITICAL: S·ª≠ d·ª•ng ch√≠nh x√°c c√πng logic t√≠nh to√°n v·ªõi WallPlacer v√† GameManager
        Vector3 boardStart = new Vector3(-5.0f, 0f, -4.85f); // ƒê·ªíNG B·ªò v·ªõi WallPlacer.GetBoardStartPosition()
        float squareSize = 1.0f; // T·ª´ BoardManager
        float squareSpacing = 0.1f; // T·ª´ BoardManager
        float stepSize = squareSize + squareSpacing; // 1.1f
        
        float tolerance = 0.7f; // Tolerance ƒë·ªÉ detect wall
        
        string direction = "";
        Vector3 expectedWallPos = Vector3.zero;
        bool shouldBeBlocked = false;
        
        if (deltaCol == 1) // Di chuy·ªÉn sang PH·∫¢I (col tƒÉng)
        {
            direction = "RIGHT";
            // Ki·ªÉm tra vertical wall b√™n ph·∫£i √¥ hi·ªán t·∫°i
            // Wall n√†y n·∫±m gi·ªØa [fromRow, fromCol] v√† [fromRow, fromCol+1]
            expectedWallPos = new Vector3(
                boardStart.x + (fromCol + 1) * stepSize - squareSpacing * 0.5f, // C·∫°nh ph·∫£i √¥ hi·ªán t·∫°i
                0.1f,
                boardStart.z + fromRow * stepSize + squareSize * 0.5f // Center c·ªßa h√†ng
            );
            
            shouldBeBlocked = !isHorizontalWall && Vector3.Distance(wallPos, expectedWallPos) < tolerance;
        }
        else if (deltaCol == -1) // Di chuy·ªÉn sang TR√ÅI (col gi·∫£m)
        {
            direction = "LEFT";
            // Ki·ªÉm tra vertical wall b√™n tr√°i √¥ hi·ªán t·∫°i
            // Wall n√†y n·∫±m gi·ªØa [fromRow, fromCol-1] v√† [fromRow, fromCol]
            expectedWallPos = new Vector3(
                boardStart.x + fromCol * stepSize - squareSpacing * 0.5f, // C·∫°nh tr√°i √¥ hi·ªán t·∫°i
                0.1f,
                boardStart.z + fromRow * stepSize + squareSize * 0.5f // Center c·ªßa h√†ng
            );
            
            shouldBeBlocked = !isHorizontalWall && Vector3.Distance(wallPos, expectedWallPos) < tolerance;
        }
        else if (deltaRow == 1) // Di chuy·ªÉn L√äN TR√äN (row tƒÉng)
        {
            direction = "UP";
            // Ki·ªÉm tra horizontal wall ph√≠a tr√™n √¥ hi·ªán t·∫°i
            expectedWallPos = new Vector3(
                boardStart.x + fromCol * stepSize + squareSize * 0.5f, // Center c·ªßa c·ªôt
                0.1f,
                boardStart.z + (fromRow + 1) * stepSize - squareSpacing * 0.5f // C·∫°nh tr√™n √¥ hi·ªán t·∫°i
            );
            
            shouldBeBlocked = isHorizontalWall && Vector3.Distance(wallPos, expectedWallPos) < tolerance;
        }
        else if (deltaRow == -1) // Di chuy·ªÉn XU·ªêNG D∆Ø·ªöI (row gi·∫£m)
        {
            direction = "DOWN";
            // Ki·ªÉm tra horizontal wall ph√≠a d∆∞·ªõi √¥ hi·ªán t·∫°i
            expectedWallPos = new Vector3(
                boardStart.x + fromCol * stepSize + squareSize * 0.5f, // Center c·ªßa c·ªôt
                0.1f,
                boardStart.z + fromRow * stepSize - squareSpacing * 0.5f // C·∫°nh d∆∞·ªõi √¥ hi·ªán t·∫°i
            );
            
            shouldBeBlocked = isHorizontalWall && Vector3.Distance(wallPos, expectedWallPos) < tolerance;
        }
        
        float distance = Vector3.Distance(wallPos, expectedWallPos);
        Debug.Log($"üß± {direction} movement check: Wall at {wallPos} vs Expected {expectedWallPos}, Distance: {distance:F3}, IsHorizontal: {isHorizontalWall}, Tolerance: {tolerance}");
        
        if (shouldBeBlocked)
        {
            Debug.Log($"üö´ {direction} movement BLOCKED by {(isHorizontalWall ? "horizontal" : "vertical")} wall!");
        }
        else
        {
            Debug.Log($"‚úÖ {direction} movement NOT blocked - {(isHorizontalWall ? "horizontal" : "vertical")} wall too far or wrong type");
        }
        
        return shouldBeBlocked;
    }
    
    /// <summary>
    /// Test method ƒë·ªÉ debug wall blocking logic
    /// </summary>
    [ContextMenu("Test Wall Blocking")]
    public void TestWallBlocking()
    {
        Debug.Log($"üß™ Testing wall blocking for Player {playerID} at [{col}, {row}]");
        
        // Test 4 h∆∞·ªõng
        string[] directions = { "RIGHT", "LEFT", "UP", "DOWN" };
        Vector2Int[] deltas = {
            new Vector2Int(1, 0),   // RIGHT
            new Vector2Int(-1, 0),  // LEFT
            new Vector2Int(0, 1),   // UP
            new Vector2Int(0, -1)   // DOWN
        };
        
        for (int i = 0; i < 4; i++)
        {
            Vector2Int delta = deltas[i];
            int toCol = col + delta.x;
            int toRow = row + delta.y;
            
            if (IsValidPosition(toCol, toRow))
            {
                bool blocked = IsBlockedByWall(col, row, toCol, toRow);
                string status = blocked ? "üö´ BLOCKED" : "‚úÖ FREE";
                Debug.Log($"   {directions[i]} to [{toCol}, {toRow}]: {status}");
            }
            else
            {
                Debug.Log($"   {directions[i]} to [{toCol}, {toRow}]: ‚ö†Ô∏è OUT OF BOUNDS");
            }
        }
    }
    
    /// <summary>
    /// Enhanced debug method with real-time wall analysis
    /// </summary>
    [ContextMenu("Debug Wall Blocking Detailed")]
    public void DebugWallBlockingDetailed()
    {
        Debug.Log($"üîç === DETAILED WALL BLOCKING ANALYSIS for Player {playerID} at [{col}, {row}] ===");
        
        // Find all walls first
        GameObject[] placedWalls1 = GameObject.FindGameObjectsWithTag("PlacedWall");
        GameObject[] placedWalls2 = GameObject.FindGameObjectsWithTag("Wall");
        GameObject[] allWalls = new GameObject[placedWalls1.Length + placedWalls2.Length];
        placedWalls1.CopyTo(allWalls, 0);
        placedWalls2.CopyTo(allWalls, placedWalls1.Length);
        
        Debug.Log($"üìä Found {allWalls.Length} total walls on board");
        
        // Analyze each wall
        for (int i = 0; i < allWalls.Length; i++)
        {
            if (allWalls[i] != null)
            {
                Vector3 wallPos = allWalls[i].transform.position;
                bool isHorizontal = IsHorizontalWall(allWalls[i]);
                Debug.Log($"   Wall {i}: '{allWalls[i].name}' at {wallPos}, horizontal: {isHorizontal}");
            }
        }
        
        Debug.Log($"");
        
        // Test 4 h∆∞·ªõng v·ªõi detailed analysis
        string[] directions = { "RIGHT", "LEFT", "UP", "DOWN" };
        Vector2Int[] deltas = {
            new Vector2Int(1, 0),   // RIGHT
            new Vector2Int(-1, 0),  // LEFT
            new Vector2Int(0, 1),   // UP
            new Vector2Int(0, -1)   // DOWN
        };
        
        for (int i = 0; i < 4; i++)
        {
            Vector2Int delta = deltas[i];
            int toCol = col + delta.x;
            int toRow = row + delta.y;
            
            Debug.Log($"üéØ Testing {directions[i]} movement to [{toCol}, {toRow}]:");
            
            if (!IsValidPosition(toCol, toRow))
            {
                Debug.Log($"   ‚ùå OUT OF BOUNDS");
                continue;
            }
            
            bool blocked = IsBlockedByWall(col, row, toCol, toRow);
            string status = blocked ? "üö´ BLOCKED" : "‚úÖ FREE";
            Debug.Log($"   {status}");
            Debug.Log($"");
        }
        
        Debug.Log($"üîç === END WALL BLOCKING ANALYSIS ===");
    }
}
