using UnityEngine;
using System.Collections.Generic;
using System.Linq;

/// <summary>
/// Model chatbot t·ª± train v·ªõi kh·∫£ nƒÉng h·ªçc t·ª´ d·ªØ li·ªáu
/// H·ªó tr·ª£ pattern matching v√† keyword recognition
/// </summary>
[System.Serializable]
public class TrainedChatbotModel
{
    [Header("Training Data")]
    public List<ChatPattern> patterns = new List<ChatPattern>();
    public List<string> defaultResponses = new List<string>();
    
    [Header("Learning Settings")]
    public float confidenceThreshold = 0.6f;
    public int maxLearnedPatterns = 1000;
    
    private Dictionary<string, List<string>> keywordResponses = new Dictionary<string, List<string>>();
    private List<ChatHistory> conversationHistory = new List<ChatHistory>();
    
    public void Initialize()
    {
        LoadDefaultPatterns();
        BuildKeywordIndex();
        Debug.Log($"ü§ñ Chatbot initialized with {patterns.Count} patterns");
    }
    
    void LoadDefaultPatterns()
    {
        // Quoridor game patterns
        patterns.Add(new ChatPattern("quoridor", new string[] {"quoridor", "tr√≤ ch∆°i", "game"}, 
            new string[] {"Quoridor l√† tr√≤ ch∆°i chi·∫øn l∆∞·ª£c th√∫ v·ªã! M·ª•c ti√™u l√† ƒë∆∞a qu√¢n c·ªù v·ªÅ ph√≠a ƒë·ªëi di·ªán.", 
                         "Trong Quoridor, b·∫°n c√≥ th·ªÉ di chuy·ªÉn qu√¢n ho·∫∑c ƒë·∫∑t t∆∞·ªùng ƒë·ªÉ c·∫£n ƒë·ªëi th·ªß!"}));
        
        patterns.Add(new ChatPattern("rules", new string[] {"lu·∫≠t", "quy t·∫Øc", "c√°ch ch∆°i", "h∆∞·ªõng d·∫´n"}, 
            new string[] {"M·ªói l∆∞·ª£t, b·∫°n c√≥ th·ªÉ di chuy·ªÉn qu√¢n 1 √¥ ho·∫∑c ƒë·∫∑t t∆∞·ªùng. M·ª•c ti√™u l√† v·ªÅ ƒë√≠ch tr∆∞·ªõc ƒë·ªëi th·ªß.", 
                         "Qu√¢n c√≥ th·ªÉ di chuy·ªÉn l√™n/xu·ªëng/tr√°i/ph·∫£i. T∆∞·ªùng c·∫£n ƒë∆∞·ªùng ƒëi nh∆∞ng kh√¥ng ƒë∆∞·ª£c ch·∫∑n ho√†n to√†n."}));
        
        patterns.Add(new ChatPattern("strategy", new string[] {"chi·∫øn thu·∫≠t", "strategy", "b√≠ k√≠p", "m·∫πo"}, 
            new string[] {"C√¢n b·∫±ng gi·ªØa ti·∫øn v·ªÅ ƒë√≠ch v√† c·∫£n ƒë·ªëi th·ªß. ƒê·ª´ng l√£ng ph√≠ t∆∞·ªùng!", 
                         "Quan s√°t n∆∞·ªõc ƒëi c·ªßa ƒë·ªëi th·ªß v√† d·ª± ƒëo√°n √Ω ƒë·ªãnh. Ki·ªÉm so√°t trung t√¢m b√†n c·ªù!"}));
        
        patterns.Add(new ChatPattern("greeting", new string[] {"xin ch√†o", "hello", "hi", "ch√†o"}, 
            new string[] {"Xin ch√†o! T√¥i l√† AI h·ªó tr·ª£ game Quoridor. B·∫°n c·∫ßn gi√∫p g√¨?", 
                         "Ch√†o b·∫°n! H√£y h·ªèi t√¥i v·ªÅ lu·∫≠t ch∆°i ho·∫∑c chi·∫øn thu·∫≠t Quoridor nh√©!"}));
        
        patterns.Add(new ChatPattern("help", new string[] {"gi√∫p", "help", "h·ªó tr·ª£", "tr·ª£ gi√∫p"}, 
            new string[] {"T√¥i c√≥ th·ªÉ gi√∫p b·∫°n hi·ªÉu lu·∫≠t ch∆°i, chi·∫øn thu·∫≠t v√† ph√¢n t√≠ch n∆∞·ªõc ƒëi trong Quoridor!", 
                         "H√£y h·ªèi t√¥i v·ªÅ: Lu·∫≠t ch∆°i, Chi·∫øn thu·∫≠t, Ph√¢n t√≠ch game, ho·∫∑c b·∫•t k·ª≥ c√¢u h·ªèi n√†o!"}));
        
        // Default responses
        defaultResponses.AddRange(new string[] {
            "T√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi n√†y. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ Quoridor kh√¥ng?",
            "C√≥ th·ªÉ b·∫°n mu·ªën h·ªèi v·ªÅ lu·∫≠t ch∆°i ho·∫∑c chi·∫øn thu·∫≠t Quoridor?",
            "T√¥i ƒëang h·ªçc th√™m. H√£y th·ª≠ h·ªèi v·ªÅ game Quoridor nh√©!"
        });
    }
    
    void BuildKeywordIndex()
    {
        keywordResponses.Clear();
        foreach (var pattern in patterns)
        {
            foreach (var keyword in pattern.keywords)
            {
                if (!keywordResponses.ContainsKey(keyword.ToLower()))
                    keywordResponses[keyword.ToLower()] = new List<string>();
                keywordResponses[keyword.ToLower()].AddRange(pattern.responses);
            }
        }
    }
    
    public string GetResponse(string input)
    {
        if (string.IsNullOrEmpty(input)) return GetRandomDefaultResponse();
        
        input = input.ToLower().Trim();
        
        // Record conversation
        conversationHistory.Add(new ChatHistory(input, System.DateTime.Now));
        
        // Try pattern matching first
        var bestMatch = FindBestPattern(input);
        if (bestMatch != null && bestMatch.confidence >= confidenceThreshold)
        {
            return GetRandomResponse(bestMatch.pattern.responses);
        }
        
        // Try keyword matching
        var keywordResponse = FindKeywordResponse(input);
        if (!string.IsNullOrEmpty(keywordResponse))
        {
            return keywordResponse;
        }
        
        // Learn new pattern if confident enough
        LearnFromInput(input);
        
        return GetRandomDefaultResponse();
    }
    
    PatternMatch FindBestPattern(string input)
    {
        PatternMatch bestMatch = null;
        float bestConfidence = 0f;
        
        foreach (var pattern in patterns)
        {
            float confidence = CalculateConfidence(input, pattern);
            if (confidence > bestConfidence)
            {
                bestConfidence = confidence;
                bestMatch = new PatternMatch(pattern, confidence);
            }
        }
        
        return bestMatch;
    }
    
    float CalculateConfidence(string input, ChatPattern pattern)
    {
        int matchCount = 0;
        var inputWords = input.Split(' ');
        
        foreach (var keyword in pattern.keywords)
        {
            if (input.Contains(keyword.ToLower()))
                matchCount++;
        }
        
        // Bonus for exact pattern name match
        if (input.Contains(pattern.patternName.ToLower()))
            matchCount += 2;
        
        return (float)matchCount / pattern.keywords.Length;
    }
    
    string FindKeywordResponse(string input)
    {
        var words = input.Split(' ');
        var responses = new List<string>();
        
        foreach (var word in words)
        {
            if (keywordResponses.ContainsKey(word))
                responses.AddRange(keywordResponses[word]);
        }
        
        return responses.Any() ? GetRandomResponse(responses.ToArray()) : null;
    }
    
    void LearnFromInput(string input)
    {
        if (patterns.Count >= maxLearnedPatterns) return;
        
        // Simple learning: if input contains game-related keywords, create a pattern
        var gameKeywords = new[] {"quoridor", "game", "t∆∞·ªùng", "qu√¢n", "c·ªù", "ch∆°i"};
        if (gameKeywords.Any(k => input.Contains(k)))
        {
            var newPattern = new ChatPattern($"learned_{patterns.Count}", 
                new string[] {input}, 
                new string[] {"T√¥i ƒë√£ ghi nh·∫≠n c√¢u h·ªèi n√†y. C·∫£m ∆°n b·∫°n ƒë√£ gi√∫p t√¥i h·ªçc!"});
            patterns.Add(newPattern);
            BuildKeywordIndex();
        }
    }
    
    string GetRandomResponse(string[] responses)
    {
        if (responses == null || responses.Length == 0) return GetRandomDefaultResponse();
        return responses[Random.Range(0, responses.Length)];
    }
    
    string GetRandomDefaultResponse()
    {
        return defaultResponses[Random.Range(0, defaultResponses.Count)];
    }
    
    public ChatAnalytics GetAnalytics()
    {
        return new ChatAnalytics
        {
            totalPatterns = patterns.Count,
            totalConversations = conversationHistory.Count,
            lastInteraction = conversationHistory.LastOrDefault()?.timestamp ?? System.DateTime.MinValue,
            popularKeywords = GetPopularKeywords()
        };
    }
    
    List<string> GetPopularKeywords()
    {
        return keywordResponses.Keys.Take(5).ToList();
    }
}

[System.Serializable]
public class ChatPattern
{
    public string patternName;
    public string[] keywords;
    public string[] responses;
    
    public ChatPattern(string name, string[] keys, string[] resp)
    {
        patternName = name;
        keywords = keys;
        responses = resp;
    }
}

[System.Serializable]
public class PatternMatch
{
    public ChatPattern pattern;
    public float confidence;
    
    public PatternMatch(ChatPattern p, float c)
    {
        pattern = p;
        confidence = c;
    }
}

[System.Serializable]
public class ChatHistory
{
    public string input;
    public System.DateTime timestamp;
    
    public ChatHistory(string inp, System.DateTime time)
    {
        input = inp;
        timestamp = time;
    }
}

[System.Serializable]
public class ChatAnalytics
{
    public int totalPatterns;
    public int totalConversations;
    public System.DateTime lastInteraction;
    public List<string> popularKeywords;
}
